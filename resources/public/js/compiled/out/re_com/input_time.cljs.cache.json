["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$parseInt",["^ "],"~$isNaN",["^ "],"~$Error",["^ "],"~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$handler-fn","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^D","^D","^:","^:","~$re-com.text","^E","~$re-com.box","^F","~$re-com.util","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^:","~$h-box","^F","~$deref-or-value","^G","~$css-style?","^:","~$label","^E","~$number-or-string?","^:","~$pad-zero-number","^G","~$gap","^F"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","~:line",50,"~:column",8,"~:end-line",50,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^11",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^[",true,"^?","~$re-com.input-time/text->time","~:variadic",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"~:method-params",["^11",[["^13"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^X",1,"^W",50,"^Y",50,"~:max-fixed-arity",1,"~:fn-var",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",116,"^X",8,"^Y",116,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^14","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^[",true,"^?","~$re-com.input-time/on-defocus","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^17",["^11",[["^1=","^1>","^1?","^1@","^1A"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",116,"^Y",116,"^1:",5,"^1;",true,"^10",["^11",["^12",["^11",[["^1=","^1>","^1?","^1@","^1A"]]]]],"^14","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",74,"^X",8,"^Y",74,"^Z",19,"^[",true,"^10",["^11",["^12",["^11",[["~$time"]]]]]],"^[",true,"^?","~$re-com.input-time/valid-time?","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",19,"^17",["^11",[["^1D"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",74,"^Y",74,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^1D"]]]]]],"~$input-time-args-desc",["^ ","^?","~$re-com.input-time/input-time-args-desc","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^W",127,"^X",1,"^Y",127,"^Z",26,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",127,"^X",6,"^Y",127,"^Z",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",15,"^X",8,"^Y",15,"^Z",17,"^[",true,"^10",["^11",["^12",["^11",[["^1D"]]]]]],"^[",true,"^?","~$re-com.input-time/time->hrs","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",17,"^17",["^11",[["^1D"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",15,"^Y",15,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^1D"]]]]]],"~$time->mins",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",10,"^X",8,"^Y",10,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["^1D"]]]]]],"^[",true,"^?","~$re-com.input-time/time->mins","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^17",["^11",[["^1D"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",10,"^Y",10,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^1D"]]]]]],"~$triple->time",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",25,"^X",8,"^Y",25,"^Z",20,"^[",true,"^10",["^11",["^12",["^11",[[["~$hr","~$_","~$mi"]]]]]],"^14","Return a time integer from a triple int vector of form  [H  _  M]"],"^[",true,"^?","~$re-com.input-time/triple->time","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",20,"^17",["^11",[["~$p__69770"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",25,"^Y",25,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[[["^1O","~$_","^1P"]]]]]],"^14","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",66,"^X",8,"^Y",66,"^Z",19,"^[",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^[",true,"^?","~$re-com.input-time/valid-text?","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",19,"^17",["^11",[["^13"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",66,"^Y",66,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",59,"^X",8,"^Y",59,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["^1D"]]]]],"^14","return a string of format HH:MM for 'time'"],"^[",true,"^?","~$re-com.input-time/time->text","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^17",["^11",[["^1D"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",59,"^Y",59,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^1D"]]]]],"^14","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^?","~$re-com.input-time/triple-seeking-re","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^W",39,"^X",1,"^Y",40,"^Z",20,"^[",true,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",40,"^X",3,"^Y",40,"^Z",20,"^[",true],"^1H","~$any"],"~$on-new-keypress",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",101,"^X",8,"^Y",101,"^Z",23,"^[",true,"^10",["^11",["^12",["^11",[["~$event","^1="]]]]],"^14","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^[",true,"^?","~$re-com.input-time/on-new-keypress","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",23,"^17",["^11",[["^1[","^1="]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",101,"^Y",101,"^1:",2,"^1;",true,"^10",["^11",["^12",["^11",[["^1[","^1="]]]]],"^14","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",19,"^X",8,"^Y",19,"^Z",14,"^[",true,"^10",["^11",["^12",["^11",[["~$s"]]]]],"^14","Parse the string 's' to a valid int. On parse failure, return 0"],"^[",true,"^?","~$re-com.input-time/to-int","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",14,"^17",["^11",[["~$s"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",19,"^Y",19,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["~$s"]]]]],"^14","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",42,"^X",8,"^Y",42,"^Z",32,"^[",true,"^10",["^11",["^12",["^11",[["^13"]]]]]],"^[",true,"^?","~$re-com.input-time/extract-triple-from-text","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",32,"^17",["^11",[["^13"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",42,"^Y",42,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^13"]]]]]],"~$validate-arg-times",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",82,"^X",8,"^Y",82,"^Z",26,"^[",true,"^10",["^11",["^12",["^11",[["~$model","~$minimum","~$maximum"]]]]]],"^[",true,"^?","~$re-com.input-time/validate-arg-times","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",26,"^17",["^11",[["^26","^27","^28"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",82,"^Y",82,"^1:",3,"^1;",true,"^10",["^11",["^12",["^11",[["^26","^27","^28"]]]]]],"~$force-valid-time",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",90,"^X",8,"^Y",90,"^Z",24,"^[",true,"^10",["^11",["^12",["^11",[["^1D","^1>","^1?","~$previous"]]]]],"^14","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^[",true,"^?","~$re-com.input-time/force-valid-time","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",24,"^17",["^11",[["^1D","^1>","^1?","^2;"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",90,"^Y",90,"^1:",4,"^1;",true,"^10",["^11",["^12",["^11",[["^1D","^1>","^1?","^2;"]]]]],"^14","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",141,"^X",7,"^Y",141,"^Z",17,"^10",["^11",["^12",["^11",[["~$&",["^ ","~:keys",["^26","^27","^28"],"~:as","~$args","~:or",["^ ","^27",0,"^28",2359]]]]]]],"^14","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^16",true,"^1:",0,"^17",[["^11",[["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^10",["^11",[["~$&",["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^19",["^11",[null]]]],"^?","~$re-com.input-time/input-time","^16",true,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",17,"^2B",["^ ","^16",true,"^1:",0,"^17",[["^11",[["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^10",["^11",[["~$&",["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^19",["^11",[null]]],"^17",[["^11",[["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^18",null,"^19",["^11",[null]],"^X",1,"^W",141,"^Y",141,"^1:",0,"^1;",true,"^10",["^11",[["~$&",["^ ","^2>",["^26","^27","^28"],"^2?","^2@","^2A",["^ ","^27",0,"^28",2359]]]]],"^14","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^T",null,"^U",["^ ","^V","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/input_time.cljs","^W",109,"^X",8,"^Y",109,"^Z",27,"^[",true,"^10",["^11",["^12",["^11",[["~$ev"]]]]],"^14","When Enter is pressed, force the component to lose focus"],"^[",true,"^?","~$re-com.input-time/lose-focus-if-enter","^16",false,"^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",27,"^17",["^11",[["^2E"]]],"^18",null,"^19",["^11",[null,null]],"^X",1,"^W",109,"^Y",109,"^1:",1,"^1;",true,"^10",["^11",["^12",["^11",[["^2E"]]]]],"^14","When Enter is pressed, force the component to lose focus"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^D","^D","^D","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^?","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^2O","^?","^39","^2W","^33","^2K","^3=","^36","^2Q","^2[","^2S","^38","^30","^2T","^2U","^3:","^2Z","^2X","^3>","^3;","^31","^34","^37","^2L","^35","^2R","^2N","^2V","^2Y","^2M","^2P","^32","^3<"]],"^14",null]