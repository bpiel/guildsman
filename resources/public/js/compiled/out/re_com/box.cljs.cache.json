["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^@","^@","^8","^8"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^8","~$scroll-style?","^8","~$align-style?","^8","~$justify-style?","^8","~$scroll-options-list","^8","~$css-style?","^8","~$justify-options-list","^8","~$string-or-hiccup?","^8","~$align-options-list","^8"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","~:line",82,"~:column",7,"~:end-line",82,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^V",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^;","~$re-com.box/align-style","~:variadic",false,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",18,"~:method-params",["^V",[["^X","^Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"^Q",82,"^S",82,"~:max-fixed-arity",2,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X","^Y"]]]]],"^Z","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",233,"^R",7,"^S",233,"^T",12,"^U",["^V",["^W",["^V",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^Y","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^18","none","^1?","~:start","^Y","~:stretch"],"~:as","~$args"]]]]]],"^Z","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/h-box","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",12,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",233,"^S",233,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^Z","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",473,"^R",7,"^S",473,"^T",13,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]]]],"^Z","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/border","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",13,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",473,"^S",473,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^Z","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$flex-flow-style",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",60,"^R",7,"^S",60,"^T",22,"^U",["^V",["^W",["^V",[["~$flex-flow"]]]]],"^Z","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^;","~$re-com.box/flex-flow-style","^10",false,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",22,"^11",["^V",[["^1X"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",60,"^S",60,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^1X"]]]]],"^Z","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^;","~$re-com.box/h-box-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",214,"^R",1,"^S",214,"^T",21,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",214,"^R",6,"^S",214,"^T",21],"~:tag","~$cljs.core/IVector"],"~$scroller",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",407,"^R",7,"^S",407,"^T",15,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","~$scroll","~$h-scroll","~$v-scroll","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]]]],"^Z","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/scroller","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",15,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",407,"^S",407,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","auto"],"^1K","^1L"]]]],"^Z","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",352,"^R",7,"^S",352,"^T",10,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]]]],"^Z","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/box","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",10,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",352,"^S",352,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1U","^1E","^1F","^1G"],"^1H",["^ ","^18","none"],"^1K","^1L"]]]],"^Z","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^;","~$re-com.box/box-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",334,"^R",1,"^S",334,"^T",19,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",334,"^R",6,"^S",334,"^T",19],"^20","^21"],"~$debug",["^ ","^;","~$re-com.box/debug","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",6,"^R",1,"^S",6,"^T",11,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",6,"^R",6,"^S",6,"^T",11],"^20","~$boolean"],"~$justify-style",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",66,"^R",7,"^S",66,"^T",20,"^U",["^V",["^W",["^V",[["^1?"]]]]],"^Z","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^;","~$re-com.box/justify-style","^10",false,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",20,"^11",["^V",[["^1?"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",66,"^S",66,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^1?"]]]]],"^Z","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^;","~$re-com.box/gap-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",157,"^R",1,"^S",157,"^T",19,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",157,"^R",6,"^S",157,"^T",19],"^20","^21"],"~$v-box",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",293,"^R",7,"^S",293,"^T",12,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]]]],"^Z","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/v-box","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",12,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",293,"^S",293,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"],"^1H",["^ ","^18","none","^1?","^1I","^Y","^1J"],"^1K","^1L"]]]],"^Z","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",13,"^R",7,"^S",13,"^T",23,"^U",["^V",["^W",["^V",[["^18"]]]]],"^Z","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^;","~$re-com.box/flex-child-style","^10",false,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",23,"^11",["^V",[["^18"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",13,"^S",13,"^14",1,"^15",true,"^U",["^V",["^W",["^V",[["^18"]]]]],"^Z","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^;","~$re-com.box/line-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",186,"^R",1,"^S",186,"^T",20,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",186,"^R",6,"^S",186,"^T",20],"^20","^21"],"~$scroller-args-desc",["^ ","^;","~$re-com.box/scroller-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",382,"^R",1,"^S",382,"^T",24,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",382,"^R",6,"^S",382,"^T",24],"^20","^21"],"~$line",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",193,"^R",7,"^S",193,"^T",11,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","~$color","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]]]],"^Z","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/line","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",11,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",193,"^S",193,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^2K","^1E","^1F","^1G"],"^1H",["^ ","^18","1px","^2K","lightgray"],"^1K","^1L"]]]],"^Z","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",99,"^R",7,"^S",99,"^T",19,"^U",["^V",["^W",["^V",[["^X","^23"]]]]],"^Z","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^;","~$re-com.box/scroll-style","^10",false,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",19,"^11",["^V",[["^X","^23"]]],"^12",null,"^13",["^V",[null,null]],"^R",1,"^Q",99,"^S",99,"^14",2,"^15",true,"^U",["^V",["^W",["^V",[["^X","^23"]]]]],"^Z","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1C",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",165,"^R",7,"^S",165,"^T",10,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]]]],"^Z","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^13",["^V",[null]]]],"^;","~$re-com.box/gap","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",10,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",165,"^S",165,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^19","^1:","^1E","^1F","^1G"],"^1K","^1L"]]]],"^Z","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^;","~$re-com.box/border-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",452,"^R",1,"^S",452,"^T",22,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",452,"^R",6,"^S",452,"^T",22],"^20","^21"],"~$v-box-args-desc",["^ ","^;","~$re-com.box/v-box-args-desc","^P","resources/public/js/compiled/out/re_com/box.cljs","^Q",274,"^R",1,"^S",274,"^T",21,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",274,"^R",6,"^S",274,"^T",21],"^20","^21"],"~$box-base",["^ ","^N",null,"^O",["^ ","^P","/home/bill/repos/guildsman/resources/public/js/compiled/out/re_com/box.cljs","^Q",115,"^R",8,"^S",115,"^T",16,"~:private",true,"^U",["^V",["^W",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","~$bk-color","^1U","~$class-name","^1E","^1F","^1G"]]]]]]],"^Z","This should generally NOT be used as it is the basis for the box, scroller and border components","^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^13",["^V",[null]]]],"^2U",true,"^;","~$re-com.box/box-base","^10",true,"^P","resources/public/js/compiled/out/re_com/box.cljs","^T",16,"^1M",["^ ","^10",true,"^14",0,"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^13",["^V",[null]]],"^11",[["^V",[["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^12",null,"^13",["^V",[null]],"^R",1,"^Q",115,"^S",115,"^14",0,"^15",true,"^U",["^V",[["~$&",["^ ","^17",["^18","^23","^24","^25","^19","^1:","^1;","^1<","^1=","^1>","^1?","^Y","^1@","^1A","^1B","^1O","^1P","^1Q","^1R","^1S","^1T","^2V","^1U","^2W","^1E","^1F","^1G"]]]]],"^Z","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^8","^8"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^;","~:-webkit-flex-flow","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1I","~:type","~:flex","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1J","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^3B","^3F","^3?","^4;","^3C","^3S","^3[","^40","^41","^45","^48","^4<","^4=","^32","^35","^36","^37","^3:","^3;","^3<","^3A","^3D","^3G","^3H","^3I","^3K","^3L","^3O","^3Q","^3P","^3R","^3U","^3Z","^3>","^3W","^43","^34","^3J","^38","^42","^49","^44","^3@","^3M","^;","^47","^3E","^3X","^31","^4:","^3V","^3Y","^3=","^39","^33","^3N","^1I","^1J","^3T","^46"]],"^Z",null]