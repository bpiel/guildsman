// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

package org.tensorflow.distruntime;

/**
 * Protobuf type {@code tensorflow.RecvTensorRequest}
 */
public  final class RecvTensorRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:tensorflow.RecvTensorRequest)
    RecvTensorRequestOrBuilder {
  // Use RecvTensorRequest.newBuilder() to construct.
  private RecvTensorRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RecvTensorRequest() {
    stepId_ = 0L;
    rendezvousKey_ = "";
    dmaOk_ = false;
    requestId_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private RecvTensorRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {

            stepId_ = input.readInt64();
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            rendezvousKey_ = s;
            break;
          }
          case 24: {

            dmaOk_ = input.readBool();
            break;
          }
          case 34: {
            org.tensorflow.framework.DeviceLocality.Builder subBuilder = null;
            if (clientLocality_ != null) {
              subBuilder = clientLocality_.toBuilder();
            }
            clientLocality_ = input.readMessage(org.tensorflow.framework.DeviceLocality.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(clientLocality_);
              clientLocality_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            org.tensorflow.framework.DeviceLocality.Builder subBuilder = null;
            if (serverLocality_ != null) {
              subBuilder = serverLocality_.toBuilder();
            }
            serverLocality_ = input.readMessage(org.tensorflow.framework.DeviceLocality.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(serverLocality_);
              serverLocality_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.google.protobuf.Any.Builder subBuilder = null;
            if (transportOptions_ != null) {
              subBuilder = transportOptions_.toBuilder();
            }
            transportOptions_ = input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(transportOptions_);
              transportOptions_ = subBuilder.buildPartial();
            }

            break;
          }
          case 56: {

            requestId_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RecvTensorRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RecvTensorRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tensorflow.distruntime.RecvTensorRequest.class, org.tensorflow.distruntime.RecvTensorRequest.Builder.class);
  }

  public static final int STEP_ID_FIELD_NUMBER = 1;
  private long stepId_;
  /**
   * <pre>
   * The step in which the tensor will be produced.
   * REQUIRED: This must eventually correspond to the `step_id` passed
   * into a RunGraph call on the same WorkerService.
   * </pre>
   *
   * <code>int64 step_id = 1;</code>
   */
  public long getStepId() {
    return stepId_;
  }

  public static final int RENDEZVOUS_KEY_FIELD_NUMBER = 2;
  private volatile java.lang.Object rendezvousKey_;
  /**
   * <pre>
   * A key identifying the channel to receive tensors from. A RecvTensor request
   * retrieves one tensor from the channel, but multiple tensors can be sent and
   * received over the same channel with multiple RecvTensor requests. See
   * rendezvous.h for details.
   * </pre>
   *
   * <code>string rendezvous_key = 2;</code>
   */
  public java.lang.String getRendezvousKey() {
    java.lang.Object ref = rendezvousKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      rendezvousKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A key identifying the channel to receive tensors from. A RecvTensor request
   * retrieves one tensor from the channel, but multiple tensors can be sent and
   * received over the same channel with multiple RecvTensor requests. See
   * rendezvous.h for details.
   * </pre>
   *
   * <code>string rendezvous_key = 2;</code>
   */
  public com.google.protobuf.ByteString
      getRendezvousKeyBytes() {
    java.lang.Object ref = rendezvousKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      rendezvousKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DMA_OK_FIELD_NUMBER = 3;
  private boolean dmaOk_;
  /**
   * <pre>
   * If true, use an out-of-band DMA mechanism to transfer the
   * received tensor.
   * </pre>
   *
   * <code>bool dma_ok = 3;</code>
   */
  public boolean getDmaOk() {
    return dmaOk_;
  }

  public static final int CLIENT_LOCALITY_FIELD_NUMBER = 4;
  private org.tensorflow.framework.DeviceLocality clientLocality_;
  /**
   * <pre>
   * Optional information on client-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
   */
  public boolean hasClientLocality() {
    return clientLocality_ != null;
  }
  /**
   * <pre>
   * Optional information on client-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
   */
  public org.tensorflow.framework.DeviceLocality getClientLocality() {
    return clientLocality_ == null ? org.tensorflow.framework.DeviceLocality.getDefaultInstance() : clientLocality_;
  }
  /**
   * <pre>
   * Optional information on client-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
   */
  public org.tensorflow.framework.DeviceLocalityOrBuilder getClientLocalityOrBuilder() {
    return getClientLocality();
  }

  public static final int SERVER_LOCALITY_FIELD_NUMBER = 5;
  private org.tensorflow.framework.DeviceLocality serverLocality_;
  /**
   * <pre>
   * Optional information on server-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
   */
  public boolean hasServerLocality() {
    return serverLocality_ != null;
  }
  /**
   * <pre>
   * Optional information on server-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
   */
  public org.tensorflow.framework.DeviceLocality getServerLocality() {
    return serverLocality_ == null ? org.tensorflow.framework.DeviceLocality.getDefaultInstance() : serverLocality_;
  }
  /**
   * <pre>
   * Optional information on server-side device locality.
   * </pre>
   *
   * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
   */
  public org.tensorflow.framework.DeviceLocalityOrBuilder getServerLocalityOrBuilder() {
    return getServerLocality();
  }

  public static final int TRANSPORT_OPTIONS_FIELD_NUMBER = 6;
  private com.google.protobuf.Any transportOptions_;
  /**
   * <pre>
   * Optional information needed by the RPC subsystem.
   * </pre>
   *
   * <code>.google.protobuf.Any transport_options = 6;</code>
   */
  public boolean hasTransportOptions() {
    return transportOptions_ != null;
  }
  /**
   * <pre>
   * Optional information needed by the RPC subsystem.
   * </pre>
   *
   * <code>.google.protobuf.Any transport_options = 6;</code>
   */
  public com.google.protobuf.Any getTransportOptions() {
    return transportOptions_ == null ? com.google.protobuf.Any.getDefaultInstance() : transportOptions_;
  }
  /**
   * <pre>
   * Optional information needed by the RPC subsystem.
   * </pre>
   *
   * <code>.google.protobuf.Any transport_options = 6;</code>
   */
  public com.google.protobuf.AnyOrBuilder getTransportOptionsOrBuilder() {
    return getTransportOptions();
  }

  public static final int REQUEST_ID_FIELD_NUMBER = 7;
  private long requestId_;
  /**
   * <pre>
   * Unique identifier for this request. Every RecvTensorRequest must have a
   * unique request_id, and retried RecvTensorRequests must have the same
   * request_id. If request_id is zero, retry detection is disabled.
   * Retried RecvTensorRequests are problematic because a RecvTensor with no
   * corresponding sender will wait forever, and the tensor may have been
   * delivered to a previous retry. Workers use request_ids to reject retried
   * RecvTensor requests instead of waiting forever.
   * </pre>
   *
   * <code>int64 request_id = 7;</code>
   */
  public long getRequestId() {
    return requestId_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (stepId_ != 0L) {
      output.writeInt64(1, stepId_);
    }
    if (!getRendezvousKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, rendezvousKey_);
    }
    if (dmaOk_ != false) {
      output.writeBool(3, dmaOk_);
    }
    if (clientLocality_ != null) {
      output.writeMessage(4, getClientLocality());
    }
    if (serverLocality_ != null) {
      output.writeMessage(5, getServerLocality());
    }
    if (transportOptions_ != null) {
      output.writeMessage(6, getTransportOptions());
    }
    if (requestId_ != 0L) {
      output.writeInt64(7, requestId_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (stepId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, stepId_);
    }
    if (!getRendezvousKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, rendezvousKey_);
    }
    if (dmaOk_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, dmaOk_);
    }
    if (clientLocality_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getClientLocality());
    }
    if (serverLocality_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getServerLocality());
    }
    if (transportOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTransportOptions());
    }
    if (requestId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, requestId_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.tensorflow.distruntime.RecvTensorRequest)) {
      return super.equals(obj);
    }
    org.tensorflow.distruntime.RecvTensorRequest other = (org.tensorflow.distruntime.RecvTensorRequest) obj;

    boolean result = true;
    result = result && (getStepId()
        == other.getStepId());
    result = result && getRendezvousKey()
        .equals(other.getRendezvousKey());
    result = result && (getDmaOk()
        == other.getDmaOk());
    result = result && (hasClientLocality() == other.hasClientLocality());
    if (hasClientLocality()) {
      result = result && getClientLocality()
          .equals(other.getClientLocality());
    }
    result = result && (hasServerLocality() == other.hasServerLocality());
    if (hasServerLocality()) {
      result = result && getServerLocality()
          .equals(other.getServerLocality());
    }
    result = result && (hasTransportOptions() == other.hasTransportOptions());
    if (hasTransportOptions()) {
      result = result && getTransportOptions()
          .equals(other.getTransportOptions());
    }
    result = result && (getRequestId()
        == other.getRequestId());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STEP_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStepId());
    hash = (37 * hash) + RENDEZVOUS_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getRendezvousKey().hashCode();
    hash = (37 * hash) + DMA_OK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDmaOk());
    if (hasClientLocality()) {
      hash = (37 * hash) + CLIENT_LOCALITY_FIELD_NUMBER;
      hash = (53 * hash) + getClientLocality().hashCode();
    }
    if (hasServerLocality()) {
      hash = (37 * hash) + SERVER_LOCALITY_FIELD_NUMBER;
      hash = (53 * hash) + getServerLocality().hashCode();
    }
    if (hasTransportOptions()) {
      hash = (37 * hash) + TRANSPORT_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getTransportOptions().hashCode();
    }
    hash = (37 * hash) + REQUEST_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getRequestId());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.tensorflow.distruntime.RecvTensorRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tensorflow.distruntime.RecvTensorRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code tensorflow.RecvTensorRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.RecvTensorRequest)
      org.tensorflow.distruntime.RecvTensorRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RecvTensorRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RecvTensorRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.distruntime.RecvTensorRequest.class, org.tensorflow.distruntime.RecvTensorRequest.Builder.class);
    }

    // Construct using org.tensorflow.distruntime.RecvTensorRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      stepId_ = 0L;

      rendezvousKey_ = "";

      dmaOk_ = false;

      if (clientLocalityBuilder_ == null) {
        clientLocality_ = null;
      } else {
        clientLocality_ = null;
        clientLocalityBuilder_ = null;
      }
      if (serverLocalityBuilder_ == null) {
        serverLocality_ = null;
      } else {
        serverLocality_ = null;
        serverLocalityBuilder_ = null;
      }
      if (transportOptionsBuilder_ == null) {
        transportOptions_ = null;
      } else {
        transportOptions_ = null;
        transportOptionsBuilder_ = null;
      }
      requestId_ = 0L;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tensorflow.distruntime.WorkerProtos.internal_static_tensorflow_RecvTensorRequest_descriptor;
    }

    public org.tensorflow.distruntime.RecvTensorRequest getDefaultInstanceForType() {
      return org.tensorflow.distruntime.RecvTensorRequest.getDefaultInstance();
    }

    public org.tensorflow.distruntime.RecvTensorRequest build() {
      org.tensorflow.distruntime.RecvTensorRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.tensorflow.distruntime.RecvTensorRequest buildPartial() {
      org.tensorflow.distruntime.RecvTensorRequest result = new org.tensorflow.distruntime.RecvTensorRequest(this);
      result.stepId_ = stepId_;
      result.rendezvousKey_ = rendezvousKey_;
      result.dmaOk_ = dmaOk_;
      if (clientLocalityBuilder_ == null) {
        result.clientLocality_ = clientLocality_;
      } else {
        result.clientLocality_ = clientLocalityBuilder_.build();
      }
      if (serverLocalityBuilder_ == null) {
        result.serverLocality_ = serverLocality_;
      } else {
        result.serverLocality_ = serverLocalityBuilder_.build();
      }
      if (transportOptionsBuilder_ == null) {
        result.transportOptions_ = transportOptions_;
      } else {
        result.transportOptions_ = transportOptionsBuilder_.build();
      }
      result.requestId_ = requestId_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tensorflow.distruntime.RecvTensorRequest) {
        return mergeFrom((org.tensorflow.distruntime.RecvTensorRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tensorflow.distruntime.RecvTensorRequest other) {
      if (other == org.tensorflow.distruntime.RecvTensorRequest.getDefaultInstance()) return this;
      if (other.getStepId() != 0L) {
        setStepId(other.getStepId());
      }
      if (!other.getRendezvousKey().isEmpty()) {
        rendezvousKey_ = other.rendezvousKey_;
        onChanged();
      }
      if (other.getDmaOk() != false) {
        setDmaOk(other.getDmaOk());
      }
      if (other.hasClientLocality()) {
        mergeClientLocality(other.getClientLocality());
      }
      if (other.hasServerLocality()) {
        mergeServerLocality(other.getServerLocality());
      }
      if (other.hasTransportOptions()) {
        mergeTransportOptions(other.getTransportOptions());
      }
      if (other.getRequestId() != 0L) {
        setRequestId(other.getRequestId());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.tensorflow.distruntime.RecvTensorRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.tensorflow.distruntime.RecvTensorRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long stepId_ ;
    /**
     * <pre>
     * The step in which the tensor will be produced.
     * REQUIRED: This must eventually correspond to the `step_id` passed
     * into a RunGraph call on the same WorkerService.
     * </pre>
     *
     * <code>int64 step_id = 1;</code>
     */
    public long getStepId() {
      return stepId_;
    }
    /**
     * <pre>
     * The step in which the tensor will be produced.
     * REQUIRED: This must eventually correspond to the `step_id` passed
     * into a RunGraph call on the same WorkerService.
     * </pre>
     *
     * <code>int64 step_id = 1;</code>
     */
    public Builder setStepId(long value) {
      
      stepId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The step in which the tensor will be produced.
     * REQUIRED: This must eventually correspond to the `step_id` passed
     * into a RunGraph call on the same WorkerService.
     * </pre>
     *
     * <code>int64 step_id = 1;</code>
     */
    public Builder clearStepId() {
      
      stepId_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object rendezvousKey_ = "";
    /**
     * <pre>
     * A key identifying the channel to receive tensors from. A RecvTensor request
     * retrieves one tensor from the channel, but multiple tensors can be sent and
     * received over the same channel with multiple RecvTensor requests. See
     * rendezvous.h for details.
     * </pre>
     *
     * <code>string rendezvous_key = 2;</code>
     */
    public java.lang.String getRendezvousKey() {
      java.lang.Object ref = rendezvousKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rendezvousKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A key identifying the channel to receive tensors from. A RecvTensor request
     * retrieves one tensor from the channel, but multiple tensors can be sent and
     * received over the same channel with multiple RecvTensor requests. See
     * rendezvous.h for details.
     * </pre>
     *
     * <code>string rendezvous_key = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRendezvousKeyBytes() {
      java.lang.Object ref = rendezvousKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rendezvousKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A key identifying the channel to receive tensors from. A RecvTensor request
     * retrieves one tensor from the channel, but multiple tensors can be sent and
     * received over the same channel with multiple RecvTensor requests. See
     * rendezvous.h for details.
     * </pre>
     *
     * <code>string rendezvous_key = 2;</code>
     */
    public Builder setRendezvousKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rendezvousKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A key identifying the channel to receive tensors from. A RecvTensor request
     * retrieves one tensor from the channel, but multiple tensors can be sent and
     * received over the same channel with multiple RecvTensor requests. See
     * rendezvous.h for details.
     * </pre>
     *
     * <code>string rendezvous_key = 2;</code>
     */
    public Builder clearRendezvousKey() {
      
      rendezvousKey_ = getDefaultInstance().getRendezvousKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A key identifying the channel to receive tensors from. A RecvTensor request
     * retrieves one tensor from the channel, but multiple tensors can be sent and
     * received over the same channel with multiple RecvTensor requests. See
     * rendezvous.h for details.
     * </pre>
     *
     * <code>string rendezvous_key = 2;</code>
     */
    public Builder setRendezvousKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      rendezvousKey_ = value;
      onChanged();
      return this;
    }

    private boolean dmaOk_ ;
    /**
     * <pre>
     * If true, use an out-of-band DMA mechanism to transfer the
     * received tensor.
     * </pre>
     *
     * <code>bool dma_ok = 3;</code>
     */
    public boolean getDmaOk() {
      return dmaOk_;
    }
    /**
     * <pre>
     * If true, use an out-of-band DMA mechanism to transfer the
     * received tensor.
     * </pre>
     *
     * <code>bool dma_ok = 3;</code>
     */
    public Builder setDmaOk(boolean value) {
      
      dmaOk_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, use an out-of-band DMA mechanism to transfer the
     * received tensor.
     * </pre>
     *
     * <code>bool dma_ok = 3;</code>
     */
    public Builder clearDmaOk() {
      
      dmaOk_ = false;
      onChanged();
      return this;
    }

    private org.tensorflow.framework.DeviceLocality clientLocality_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder> clientLocalityBuilder_;
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public boolean hasClientLocality() {
      return clientLocalityBuilder_ != null || clientLocality_ != null;
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public org.tensorflow.framework.DeviceLocality getClientLocality() {
      if (clientLocalityBuilder_ == null) {
        return clientLocality_ == null ? org.tensorflow.framework.DeviceLocality.getDefaultInstance() : clientLocality_;
      } else {
        return clientLocalityBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public Builder setClientLocality(org.tensorflow.framework.DeviceLocality value) {
      if (clientLocalityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        clientLocality_ = value;
        onChanged();
      } else {
        clientLocalityBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public Builder setClientLocality(
        org.tensorflow.framework.DeviceLocality.Builder builderForValue) {
      if (clientLocalityBuilder_ == null) {
        clientLocality_ = builderForValue.build();
        onChanged();
      } else {
        clientLocalityBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public Builder mergeClientLocality(org.tensorflow.framework.DeviceLocality value) {
      if (clientLocalityBuilder_ == null) {
        if (clientLocality_ != null) {
          clientLocality_ =
            org.tensorflow.framework.DeviceLocality.newBuilder(clientLocality_).mergeFrom(value).buildPartial();
        } else {
          clientLocality_ = value;
        }
        onChanged();
      } else {
        clientLocalityBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public Builder clearClientLocality() {
      if (clientLocalityBuilder_ == null) {
        clientLocality_ = null;
        onChanged();
      } else {
        clientLocality_ = null;
        clientLocalityBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public org.tensorflow.framework.DeviceLocality.Builder getClientLocalityBuilder() {
      
      onChanged();
      return getClientLocalityFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    public org.tensorflow.framework.DeviceLocalityOrBuilder getClientLocalityOrBuilder() {
      if (clientLocalityBuilder_ != null) {
        return clientLocalityBuilder_.getMessageOrBuilder();
      } else {
        return clientLocality_ == null ?
            org.tensorflow.framework.DeviceLocality.getDefaultInstance() : clientLocality_;
      }
    }
    /**
     * <pre>
     * Optional information on client-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality client_locality = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder> 
        getClientLocalityFieldBuilder() {
      if (clientLocalityBuilder_ == null) {
        clientLocalityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder>(
                getClientLocality(),
                getParentForChildren(),
                isClean());
        clientLocality_ = null;
      }
      return clientLocalityBuilder_;
    }

    private org.tensorflow.framework.DeviceLocality serverLocality_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder> serverLocalityBuilder_;
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public boolean hasServerLocality() {
      return serverLocalityBuilder_ != null || serverLocality_ != null;
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public org.tensorflow.framework.DeviceLocality getServerLocality() {
      if (serverLocalityBuilder_ == null) {
        return serverLocality_ == null ? org.tensorflow.framework.DeviceLocality.getDefaultInstance() : serverLocality_;
      } else {
        return serverLocalityBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public Builder setServerLocality(org.tensorflow.framework.DeviceLocality value) {
      if (serverLocalityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        serverLocality_ = value;
        onChanged();
      } else {
        serverLocalityBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public Builder setServerLocality(
        org.tensorflow.framework.DeviceLocality.Builder builderForValue) {
      if (serverLocalityBuilder_ == null) {
        serverLocality_ = builderForValue.build();
        onChanged();
      } else {
        serverLocalityBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public Builder mergeServerLocality(org.tensorflow.framework.DeviceLocality value) {
      if (serverLocalityBuilder_ == null) {
        if (serverLocality_ != null) {
          serverLocality_ =
            org.tensorflow.framework.DeviceLocality.newBuilder(serverLocality_).mergeFrom(value).buildPartial();
        } else {
          serverLocality_ = value;
        }
        onChanged();
      } else {
        serverLocalityBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public Builder clearServerLocality() {
      if (serverLocalityBuilder_ == null) {
        serverLocality_ = null;
        onChanged();
      } else {
        serverLocality_ = null;
        serverLocalityBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public org.tensorflow.framework.DeviceLocality.Builder getServerLocalityBuilder() {
      
      onChanged();
      return getServerLocalityFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    public org.tensorflow.framework.DeviceLocalityOrBuilder getServerLocalityOrBuilder() {
      if (serverLocalityBuilder_ != null) {
        return serverLocalityBuilder_.getMessageOrBuilder();
      } else {
        return serverLocality_ == null ?
            org.tensorflow.framework.DeviceLocality.getDefaultInstance() : serverLocality_;
      }
    }
    /**
     * <pre>
     * Optional information on server-side device locality.
     * </pre>
     *
     * <code>.tensorflow.DeviceLocality server_locality = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder> 
        getServerLocalityFieldBuilder() {
      if (serverLocalityBuilder_ == null) {
        serverLocalityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.tensorflow.framework.DeviceLocality, org.tensorflow.framework.DeviceLocality.Builder, org.tensorflow.framework.DeviceLocalityOrBuilder>(
                getServerLocality(),
                getParentForChildren(),
                isClean());
        serverLocality_ = null;
      }
      return serverLocalityBuilder_;
    }

    private com.google.protobuf.Any transportOptions_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> transportOptionsBuilder_;
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public boolean hasTransportOptions() {
      return transportOptionsBuilder_ != null || transportOptions_ != null;
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public com.google.protobuf.Any getTransportOptions() {
      if (transportOptionsBuilder_ == null) {
        return transportOptions_ == null ? com.google.protobuf.Any.getDefaultInstance() : transportOptions_;
      } else {
        return transportOptionsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public Builder setTransportOptions(com.google.protobuf.Any value) {
      if (transportOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transportOptions_ = value;
        onChanged();
      } else {
        transportOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public Builder setTransportOptions(
        com.google.protobuf.Any.Builder builderForValue) {
      if (transportOptionsBuilder_ == null) {
        transportOptions_ = builderForValue.build();
        onChanged();
      } else {
        transportOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public Builder mergeTransportOptions(com.google.protobuf.Any value) {
      if (transportOptionsBuilder_ == null) {
        if (transportOptions_ != null) {
          transportOptions_ =
            com.google.protobuf.Any.newBuilder(transportOptions_).mergeFrom(value).buildPartial();
        } else {
          transportOptions_ = value;
        }
        onChanged();
      } else {
        transportOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public Builder clearTransportOptions() {
      if (transportOptionsBuilder_ == null) {
        transportOptions_ = null;
        onChanged();
      } else {
        transportOptions_ = null;
        transportOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public com.google.protobuf.Any.Builder getTransportOptionsBuilder() {
      
      onChanged();
      return getTransportOptionsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    public com.google.protobuf.AnyOrBuilder getTransportOptionsOrBuilder() {
      if (transportOptionsBuilder_ != null) {
        return transportOptionsBuilder_.getMessageOrBuilder();
      } else {
        return transportOptions_ == null ?
            com.google.protobuf.Any.getDefaultInstance() : transportOptions_;
      }
    }
    /**
     * <pre>
     * Optional information needed by the RPC subsystem.
     * </pre>
     *
     * <code>.google.protobuf.Any transport_options = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getTransportOptionsFieldBuilder() {
      if (transportOptionsBuilder_ == null) {
        transportOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                getTransportOptions(),
                getParentForChildren(),
                isClean());
        transportOptions_ = null;
      }
      return transportOptionsBuilder_;
    }

    private long requestId_ ;
    /**
     * <pre>
     * Unique identifier for this request. Every RecvTensorRequest must have a
     * unique request_id, and retried RecvTensorRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RecvTensorRequests are problematic because a RecvTensor with no
     * corresponding sender will wait forever, and the tensor may have been
     * delivered to a previous retry. Workers use request_ids to reject retried
     * RecvTensor requests instead of waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 7;</code>
     */
    public long getRequestId() {
      return requestId_;
    }
    /**
     * <pre>
     * Unique identifier for this request. Every RecvTensorRequest must have a
     * unique request_id, and retried RecvTensorRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RecvTensorRequests are problematic because a RecvTensor with no
     * corresponding sender will wait forever, and the tensor may have been
     * delivered to a previous retry. Workers use request_ids to reject retried
     * RecvTensor requests instead of waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 7;</code>
     */
    public Builder setRequestId(long value) {
      
      requestId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique identifier for this request. Every RecvTensorRequest must have a
     * unique request_id, and retried RecvTensorRequests must have the same
     * request_id. If request_id is zero, retry detection is disabled.
     * Retried RecvTensorRequests are problematic because a RecvTensor with no
     * corresponding sender will wait forever, and the tensor may have been
     * delivered to a previous retry. Workers use request_ids to reject retried
     * RecvTensor requests instead of waiting forever.
     * </pre>
     *
     * <code>int64 request_id = 7;</code>
     */
    public Builder clearRequestId() {
      
      requestId_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.RecvTensorRequest)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.RecvTensorRequest)
  private static final org.tensorflow.distruntime.RecvTensorRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tensorflow.distruntime.RecvTensorRequest();
  }

  public static org.tensorflow.distruntime.RecvTensorRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RecvTensorRequest>
      PARSER = new com.google.protobuf.AbstractParser<RecvTensorRequest>() {
    public RecvTensorRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecvTensorRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RecvTensorRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RecvTensorRequest> getParserForType() {
    return PARSER;
  }

  public org.tensorflow.distruntime.RecvTensorRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

