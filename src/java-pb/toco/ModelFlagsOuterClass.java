// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/lite/toco/model_flags.proto

package toco;

public final class ModelFlagsOuterClass {
  private ModelFlagsOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface InputArrayShapeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.InputArrayShape)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 dims = 2;</code>
     */
    java.util.List<java.lang.Integer> getDimsList();
    /**
     * <code>repeated int32 dims = 2;</code>
     */
    int getDimsCount();
    /**
     * <code>repeated int32 dims = 2;</code>
     */
    int getDims(int index);
  }
  /**
   * Protobuf type {@code toco.InputArrayShape}
   */
  public  static final class InputArrayShape extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.InputArrayShape)
      InputArrayShapeOrBuilder {
    // Use InputArrayShape.newBuilder() to construct.
    private InputArrayShape(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InputArrayShape() {
      dims_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InputArrayShape(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dims_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              dims_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dims_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dims_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.ModelFlagsOuterClass.internal_static_toco_InputArrayShape_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.ModelFlagsOuterClass.internal_static_toco_InputArrayShape_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.ModelFlagsOuterClass.InputArrayShape.class, toco.ModelFlagsOuterClass.InputArrayShape.Builder.class);
    }

    public static final int DIMS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> dims_;
    /**
     * <code>repeated int32 dims = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getDimsList() {
      return dims_;
    }
    /**
     * <code>repeated int32 dims = 2;</code>
     */
    public int getDimsCount() {
      return dims_.size();
    }
    /**
     * <code>repeated int32 dims = 2;</code>
     */
    public int getDims(int index) {
      return dims_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dims_.size(); i++) {
        output.writeInt32(2, dims_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dims_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dims_.get(i));
        }
        size += dataSize;
        size += 1 * getDimsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.ModelFlagsOuterClass.InputArrayShape)) {
        return super.equals(obj);
      }
      toco.ModelFlagsOuterClass.InputArrayShape other = (toco.ModelFlagsOuterClass.InputArrayShape) obj;

      boolean result = true;
      result = result && getDimsList()
          .equals(other.getDimsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimsCount() > 0) {
        hash = (37 * hash) + DIMS_FIELD_NUMBER;
        hash = (53 * hash) + getDimsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArrayShape parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.ModelFlagsOuterClass.InputArrayShape prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code toco.InputArrayShape}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.InputArrayShape)
        toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArrayShape_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArrayShape_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.InputArrayShape.class, toco.ModelFlagsOuterClass.InputArrayShape.Builder.class);
      }

      // Construct using toco.ModelFlagsOuterClass.InputArrayShape.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArrayShape_descriptor;
      }

      public toco.ModelFlagsOuterClass.InputArrayShape getDefaultInstanceForType() {
        return toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance();
      }

      public toco.ModelFlagsOuterClass.InputArrayShape build() {
        toco.ModelFlagsOuterClass.InputArrayShape result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.ModelFlagsOuterClass.InputArrayShape buildPartial() {
        toco.ModelFlagsOuterClass.InputArrayShape result = new toco.ModelFlagsOuterClass.InputArrayShape(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = java.util.Collections.unmodifiableList(dims_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dims_ = dims_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.ModelFlagsOuterClass.InputArrayShape) {
          return mergeFrom((toco.ModelFlagsOuterClass.InputArrayShape)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.ModelFlagsOuterClass.InputArrayShape other) {
        if (other == toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance()) return this;
        if (!other.dims_.isEmpty()) {
          if (dims_.isEmpty()) {
            dims_ = other.dims_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimsIsMutable();
            dims_.addAll(other.dims_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.ModelFlagsOuterClass.InputArrayShape parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.ModelFlagsOuterClass.InputArrayShape) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> dims_ = java.util.Collections.emptyList();
      private void ensureDimsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dims_ = new java.util.ArrayList<java.lang.Integer>(dims_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getDimsList() {
        return java.util.Collections.unmodifiableList(dims_);
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public int getDimsCount() {
        return dims_.size();
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public int getDims(int index) {
        return dims_.get(index);
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public Builder setDims(
          int index, int value) {
        ensureDimsIsMutable();
        dims_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public Builder addDims(int value) {
        ensureDimsIsMutable();
        dims_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public Builder addAllDims(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDimsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dims_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dims = 2;</code>
       */
      public Builder clearDims() {
        dims_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.InputArrayShape)
    }

    // @@protoc_insertion_point(class_scope:toco.InputArrayShape)
    private static final toco.ModelFlagsOuterClass.InputArrayShape DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.InputArrayShape();
    }

    public static toco.ModelFlagsOuterClass.InputArrayShape getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InputArrayShape>
        PARSER = new com.google.protobuf.AbstractParser<InputArrayShape>() {
      public InputArrayShape parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new InputArrayShape(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InputArrayShape> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InputArrayShape> getParserForType() {
      return PARSER;
    }

    public toco.ModelFlagsOuterClass.InputArrayShape getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InputArrayOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.InputArray)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    boolean hasShape();
    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    toco.ModelFlagsOuterClass.InputArrayShape getShape();
    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder();

    /**
     * <pre>
     * mean_value and std_value parameters control the interpretation of raw input
     * activation values (elements of the input array) as real numbers. The
     * mapping is given by:
     *    real_value = (raw_input_value - mean_value) / std_value
     * In particular, the defaults (mean_value=0, std_value=1) yield
     * real_value = raw_input_value. Often, non-default values are used in image
     * models. For example, an image model taking uint8 image channel values as
     * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
     * map them into the interval [-1, 1).
     * Note: this matches exactly the meaning of mean_value and std_value in
     * (TensorFlow via LegacyFedInput).
     * </pre>
     *
     * <code>optional float mean_value = 3;</code>
     */
    boolean hasMeanValue();
    /**
     * <pre>
     * mean_value and std_value parameters control the interpretation of raw input
     * activation values (elements of the input array) as real numbers. The
     * mapping is given by:
     *    real_value = (raw_input_value - mean_value) / std_value
     * In particular, the defaults (mean_value=0, std_value=1) yield
     * real_value = raw_input_value. Often, non-default values are used in image
     * models. For example, an image model taking uint8 image channel values as
     * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
     * map them into the interval [-1, 1).
     * Note: this matches exactly the meaning of mean_value and std_value in
     * (TensorFlow via LegacyFedInput).
     * </pre>
     *
     * <code>optional float mean_value = 3;</code>
     */
    float getMeanValue();

    /**
     * <code>optional float std_value = 4 [default = 1];</code>
     */
    boolean hasStdValue();
    /**
     * <code>optional float std_value = 4 [default = 1];</code>
     */
    float getStdValue();

    /**
     * <pre>
     * Data type of the input.
     * In many graphs, the input arrays already have defined data types,
     * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
     * In those cases, it is not needed to specify this data_type flag.
     * The purpose of this flag is only to define the data type of input
     * arrays whose type isn't defined in the input graph file. For example,
     * when specifying an arbitrary (not Placeholder) --input_array into
     * a TensorFlow GraphDef.
     * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
     * corresponding quantization parameters are the mean_value, std_value
     * fields.
     * It is also important to understand the nuance between this data_type
     * flag and the inference_input_type in TocoFlags. The basic difference
     * is that this data_type (like all ModelFlags) describes a property
     * of the input graph, while inference_input_type (like all TocoFlags)
     * describes an aspect of the toco transformation process and thus of
     * the output file. The types of input arrays may be different between
     * the input and output files if quantization or dequantization occurred.
     * Such differences can only occur for real-number data i.e. only
     * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
     * </pre>
     *
     * <code>optional .toco.IODataType data_type = 5;</code>
     */
    boolean hasDataType();
    /**
     * <pre>
     * Data type of the input.
     * In many graphs, the input arrays already have defined data types,
     * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
     * In those cases, it is not needed to specify this data_type flag.
     * The purpose of this flag is only to define the data type of input
     * arrays whose type isn't defined in the input graph file. For example,
     * when specifying an arbitrary (not Placeholder) --input_array into
     * a TensorFlow GraphDef.
     * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
     * corresponding quantization parameters are the mean_value, std_value
     * fields.
     * It is also important to understand the nuance between this data_type
     * flag and the inference_input_type in TocoFlags. The basic difference
     * is that this data_type (like all ModelFlags) describes a property
     * of the input graph, while inference_input_type (like all TocoFlags)
     * describes an aspect of the toco transformation process and thus of
     * the output file. The types of input arrays may be different between
     * the input and output files if quantization or dequantization occurred.
     * Such differences can only occur for real-number data i.e. only
     * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
     * </pre>
     *
     * <code>optional .toco.IODataType data_type = 5;</code>
     */
    toco.Types.IODataType getDataType();
  }
  /**
   * <pre>
   * Next ID to USE: 7.
   * </pre>
   *
   * Protobuf type {@code toco.InputArray}
   */
  public  static final class InputArray extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.InputArray)
      InputArrayOrBuilder {
    // Use InputArray.newBuilder() to construct.
    private InputArray(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InputArray() {
      name_ = "";
      meanValue_ = 0F;
      stdValue_ = 1F;
      dataType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InputArray(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              meanValue_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              stdValue_ = input.readFloat();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              toco.Types.IODataType value = toco.Types.IODataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                dataType_ = rawValue;
              }
              break;
            }
            case 50: {
              toco.ModelFlagsOuterClass.InputArrayShape.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = shape_.toBuilder();
              }
              shape_ = input.readMessage(toco.ModelFlagsOuterClass.InputArrayShape.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shape_);
                shape_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.ModelFlagsOuterClass.internal_static_toco_InputArray_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.ModelFlagsOuterClass.internal_static_toco_InputArray_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.ModelFlagsOuterClass.InputArray.class, toco.ModelFlagsOuterClass.InputArray.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name of the input arrays, i.e. the arrays from which input activations
     * will be read.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_FIELD_NUMBER = 6;
    private toco.ModelFlagsOuterClass.InputArrayShape shape_;
    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    public toco.ModelFlagsOuterClass.InputArrayShape getShape() {
      return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
    }
    /**
     * <pre>
     * Shape of the input.  For many applications the dimensions are {batch,
     * height, width, depth}.  Often the batch is left "unspecified" by providing
     * a value of -1.
     * The last dimension is typically called 'depth' or 'channels'. For example,
     * for an image model taking RGB images as input, this would have the value 3.
     * </pre>
     *
     * <code>optional .toco.InputArrayShape shape = 6;</code>
     */
    public toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder() {
      return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
    }

    public static final int MEAN_VALUE_FIELD_NUMBER = 3;
    private float meanValue_;
    /**
     * <pre>
     * mean_value and std_value parameters control the interpretation of raw input
     * activation values (elements of the input array) as real numbers. The
     * mapping is given by:
     *    real_value = (raw_input_value - mean_value) / std_value
     * In particular, the defaults (mean_value=0, std_value=1) yield
     * real_value = raw_input_value. Often, non-default values are used in image
     * models. For example, an image model taking uint8 image channel values as
     * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
     * map them into the interval [-1, 1).
     * Note: this matches exactly the meaning of mean_value and std_value in
     * (TensorFlow via LegacyFedInput).
     * </pre>
     *
     * <code>optional float mean_value = 3;</code>
     */
    public boolean hasMeanValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * mean_value and std_value parameters control the interpretation of raw input
     * activation values (elements of the input array) as real numbers. The
     * mapping is given by:
     *    real_value = (raw_input_value - mean_value) / std_value
     * In particular, the defaults (mean_value=0, std_value=1) yield
     * real_value = raw_input_value. Often, non-default values are used in image
     * models. For example, an image model taking uint8 image channel values as
     * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
     * map them into the interval [-1, 1).
     * Note: this matches exactly the meaning of mean_value and std_value in
     * (TensorFlow via LegacyFedInput).
     * </pre>
     *
     * <code>optional float mean_value = 3;</code>
     */
    public float getMeanValue() {
      return meanValue_;
    }

    public static final int STD_VALUE_FIELD_NUMBER = 4;
    private float stdValue_;
    /**
     * <code>optional float std_value = 4 [default = 1];</code>
     */
    public boolean hasStdValue() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float std_value = 4 [default = 1];</code>
     */
    public float getStdValue() {
      return stdValue_;
    }

    public static final int DATA_TYPE_FIELD_NUMBER = 5;
    private int dataType_;
    /**
     * <pre>
     * Data type of the input.
     * In many graphs, the input arrays already have defined data types,
     * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
     * In those cases, it is not needed to specify this data_type flag.
     * The purpose of this flag is only to define the data type of input
     * arrays whose type isn't defined in the input graph file. For example,
     * when specifying an arbitrary (not Placeholder) --input_array into
     * a TensorFlow GraphDef.
     * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
     * corresponding quantization parameters are the mean_value, std_value
     * fields.
     * It is also important to understand the nuance between this data_type
     * flag and the inference_input_type in TocoFlags. The basic difference
     * is that this data_type (like all ModelFlags) describes a property
     * of the input graph, while inference_input_type (like all TocoFlags)
     * describes an aspect of the toco transformation process and thus of
     * the output file. The types of input arrays may be different between
     * the input and output files if quantization or dequantization occurred.
     * Such differences can only occur for real-number data i.e. only
     * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
     * </pre>
     *
     * <code>optional .toco.IODataType data_type = 5;</code>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Data type of the input.
     * In many graphs, the input arrays already have defined data types,
     * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
     * In those cases, it is not needed to specify this data_type flag.
     * The purpose of this flag is only to define the data type of input
     * arrays whose type isn't defined in the input graph file. For example,
     * when specifying an arbitrary (not Placeholder) --input_array into
     * a TensorFlow GraphDef.
     * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
     * corresponding quantization parameters are the mean_value, std_value
     * fields.
     * It is also important to understand the nuance between this data_type
     * flag and the inference_input_type in TocoFlags. The basic difference
     * is that this data_type (like all ModelFlags) describes a property
     * of the input graph, while inference_input_type (like all TocoFlags)
     * describes an aspect of the toco transformation process and thus of
     * the output file. The types of input arrays may be different between
     * the input and output files if quantization or dequantization occurred.
     * Such differences can only occur for real-number data i.e. only
     * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
     * </pre>
     *
     * <code>optional .toco.IODataType data_type = 5;</code>
     */
    public toco.Types.IODataType getDataType() {
      toco.Types.IODataType result = toco.Types.IODataType.valueOf(dataType_);
      return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, meanValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, stdValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, dataType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(6, getShape());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, meanValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, stdValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, dataType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getShape());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.ModelFlagsOuterClass.InputArray)) {
        return super.equals(obj);
      }
      toco.ModelFlagsOuterClass.InputArray other = (toco.ModelFlagsOuterClass.InputArray) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasShape() == other.hasShape());
      if (hasShape()) {
        result = result && getShape()
            .equals(other.getShape());
      }
      result = result && (hasMeanValue() == other.hasMeanValue());
      if (hasMeanValue()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMeanValue())
            == java.lang.Float.floatToIntBits(
                other.getMeanValue()));
      }
      result = result && (hasStdValue() == other.hasStdValue());
      if (hasStdValue()) {
        result = result && (
            java.lang.Float.floatToIntBits(getStdValue())
            == java.lang.Float.floatToIntBits(
                other.getStdValue()));
      }
      result = result && (hasDataType() == other.hasDataType());
      if (hasDataType()) {
        result = result && dataType_ == other.dataType_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasShape()) {
        hash = (37 * hash) + SHAPE_FIELD_NUMBER;
        hash = (53 * hash) + getShape().hashCode();
      }
      if (hasMeanValue()) {
        hash = (37 * hash) + MEAN_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMeanValue());
      }
      if (hasStdValue()) {
        hash = (37 * hash) + STD_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getStdValue());
      }
      if (hasDataType()) {
        hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + dataType_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.InputArray parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.ModelFlagsOuterClass.InputArray prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Next ID to USE: 7.
     * </pre>
     *
     * Protobuf type {@code toco.InputArray}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.InputArray)
        toco.ModelFlagsOuterClass.InputArrayOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArray_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArray_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.InputArray.class, toco.ModelFlagsOuterClass.InputArray.Builder.class);
      }

      // Construct using toco.ModelFlagsOuterClass.InputArray.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getShapeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (shapeBuilder_ == null) {
          shape_ = null;
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        meanValue_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        stdValue_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        dataType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.ModelFlagsOuterClass.internal_static_toco_InputArray_descriptor;
      }

      public toco.ModelFlagsOuterClass.InputArray getDefaultInstanceForType() {
        return toco.ModelFlagsOuterClass.InputArray.getDefaultInstance();
      }

      public toco.ModelFlagsOuterClass.InputArray build() {
        toco.ModelFlagsOuterClass.InputArray result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.ModelFlagsOuterClass.InputArray buildPartial() {
        toco.ModelFlagsOuterClass.InputArray result = new toco.ModelFlagsOuterClass.InputArray(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (shapeBuilder_ == null) {
          result.shape_ = shape_;
        } else {
          result.shape_ = shapeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanValue_ = meanValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stdValue_ = stdValue_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.dataType_ = dataType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.ModelFlagsOuterClass.InputArray) {
          return mergeFrom((toco.ModelFlagsOuterClass.InputArray)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.ModelFlagsOuterClass.InputArray other) {
        if (other == toco.ModelFlagsOuterClass.InputArray.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasShape()) {
          mergeShape(other.getShape());
        }
        if (other.hasMeanValue()) {
          setMeanValue(other.getMeanValue());
        }
        if (other.hasStdValue()) {
          setStdValue(other.getStdValue());
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.ModelFlagsOuterClass.InputArray parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.ModelFlagsOuterClass.InputArray) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the input arrays, i.e. the arrays from which input activations
       * will be read.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private toco.ModelFlagsOuterClass.InputArrayShape shape_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder> shapeBuilder_;
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayShape getShape() {
        if (shapeBuilder_ == null) {
          return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
        } else {
          return shapeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public Builder setShape(toco.ModelFlagsOuterClass.InputArrayShape value) {
        if (shapeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shape_ = value;
          onChanged();
        } else {
          shapeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public Builder setShape(
          toco.ModelFlagsOuterClass.InputArrayShape.Builder builderForValue) {
        if (shapeBuilder_ == null) {
          shape_ = builderForValue.build();
          onChanged();
        } else {
          shapeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public Builder mergeShape(toco.ModelFlagsOuterClass.InputArrayShape value) {
        if (shapeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              shape_ != null &&
              shape_ != toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance()) {
            shape_ =
              toco.ModelFlagsOuterClass.InputArrayShape.newBuilder(shape_).mergeFrom(value).buildPartial();
          } else {
            shape_ = value;
          }
          onChanged();
        } else {
          shapeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public Builder clearShape() {
        if (shapeBuilder_ == null) {
          shape_ = null;
          onChanged();
        } else {
          shapeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayShape.Builder getShapeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getShapeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder() {
        if (shapeBuilder_ != null) {
          return shapeBuilder_.getMessageOrBuilder();
        } else {
          return shape_ == null ?
              toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
        }
      }
      /**
       * <pre>
       * Shape of the input.  For many applications the dimensions are {batch,
       * height, width, depth}.  Often the batch is left "unspecified" by providing
       * a value of -1.
       * The last dimension is typically called 'depth' or 'channels'. For example,
       * for an image model taking RGB images as input, this would have the value 3.
       * </pre>
       *
       * <code>optional .toco.InputArrayShape shape = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder> 
          getShapeFieldBuilder() {
        if (shapeBuilder_ == null) {
          shapeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder>(
                  getShape(),
                  getParentForChildren(),
                  isClean());
          shape_ = null;
        }
        return shapeBuilder_;
      }

      private float meanValue_ ;
      /**
       * <pre>
       * mean_value and std_value parameters control the interpretation of raw input
       * activation values (elements of the input array) as real numbers. The
       * mapping is given by:
       *    real_value = (raw_input_value - mean_value) / std_value
       * In particular, the defaults (mean_value=0, std_value=1) yield
       * real_value = raw_input_value. Often, non-default values are used in image
       * models. For example, an image model taking uint8 image channel values as
       * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
       * map them into the interval [-1, 1).
       * Note: this matches exactly the meaning of mean_value and std_value in
       * (TensorFlow via LegacyFedInput).
       * </pre>
       *
       * <code>optional float mean_value = 3;</code>
       */
      public boolean hasMeanValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * mean_value and std_value parameters control the interpretation of raw input
       * activation values (elements of the input array) as real numbers. The
       * mapping is given by:
       *    real_value = (raw_input_value - mean_value) / std_value
       * In particular, the defaults (mean_value=0, std_value=1) yield
       * real_value = raw_input_value. Often, non-default values are used in image
       * models. For example, an image model taking uint8 image channel values as
       * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
       * map them into the interval [-1, 1).
       * Note: this matches exactly the meaning of mean_value and std_value in
       * (TensorFlow via LegacyFedInput).
       * </pre>
       *
       * <code>optional float mean_value = 3;</code>
       */
      public float getMeanValue() {
        return meanValue_;
      }
      /**
       * <pre>
       * mean_value and std_value parameters control the interpretation of raw input
       * activation values (elements of the input array) as real numbers. The
       * mapping is given by:
       *    real_value = (raw_input_value - mean_value) / std_value
       * In particular, the defaults (mean_value=0, std_value=1) yield
       * real_value = raw_input_value. Often, non-default values are used in image
       * models. For example, an image model taking uint8 image channel values as
       * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
       * map them into the interval [-1, 1).
       * Note: this matches exactly the meaning of mean_value and std_value in
       * (TensorFlow via LegacyFedInput).
       * </pre>
       *
       * <code>optional float mean_value = 3;</code>
       */
      public Builder setMeanValue(float value) {
        bitField0_ |= 0x00000004;
        meanValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mean_value and std_value parameters control the interpretation of raw input
       * activation values (elements of the input array) as real numbers. The
       * mapping is given by:
       *    real_value = (raw_input_value - mean_value) / std_value
       * In particular, the defaults (mean_value=0, std_value=1) yield
       * real_value = raw_input_value. Often, non-default values are used in image
       * models. For example, an image model taking uint8 image channel values as
       * its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
       * map them into the interval [-1, 1).
       * Note: this matches exactly the meaning of mean_value and std_value in
       * (TensorFlow via LegacyFedInput).
       * </pre>
       *
       * <code>optional float mean_value = 3;</code>
       */
      public Builder clearMeanValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanValue_ = 0F;
        onChanged();
        return this;
      }

      private float stdValue_ = 1F;
      /**
       * <code>optional float std_value = 4 [default = 1];</code>
       */
      public boolean hasStdValue() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float std_value = 4 [default = 1];</code>
       */
      public float getStdValue() {
        return stdValue_;
      }
      /**
       * <code>optional float std_value = 4 [default = 1];</code>
       */
      public Builder setStdValue(float value) {
        bitField0_ |= 0x00000008;
        stdValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float std_value = 4 [default = 1];</code>
       */
      public Builder clearStdValue() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stdValue_ = 1F;
        onChanged();
        return this;
      }

      private int dataType_ = 0;
      /**
       * <pre>
       * Data type of the input.
       * In many graphs, the input arrays already have defined data types,
       * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
       * In those cases, it is not needed to specify this data_type flag.
       * The purpose of this flag is only to define the data type of input
       * arrays whose type isn't defined in the input graph file. For example,
       * when specifying an arbitrary (not Placeholder) --input_array into
       * a TensorFlow GraphDef.
       * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
       * corresponding quantization parameters are the mean_value, std_value
       * fields.
       * It is also important to understand the nuance between this data_type
       * flag and the inference_input_type in TocoFlags. The basic difference
       * is that this data_type (like all ModelFlags) describes a property
       * of the input graph, while inference_input_type (like all TocoFlags)
       * describes an aspect of the toco transformation process and thus of
       * the output file. The types of input arrays may be different between
       * the input and output files if quantization or dequantization occurred.
       * Such differences can only occur for real-number data i.e. only
       * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
       * </pre>
       *
       * <code>optional .toco.IODataType data_type = 5;</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Data type of the input.
       * In many graphs, the input arrays already have defined data types,
       * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
       * In those cases, it is not needed to specify this data_type flag.
       * The purpose of this flag is only to define the data type of input
       * arrays whose type isn't defined in the input graph file. For example,
       * when specifying an arbitrary (not Placeholder) --input_array into
       * a TensorFlow GraphDef.
       * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
       * corresponding quantization parameters are the mean_value, std_value
       * fields.
       * It is also important to understand the nuance between this data_type
       * flag and the inference_input_type in TocoFlags. The basic difference
       * is that this data_type (like all ModelFlags) describes a property
       * of the input graph, while inference_input_type (like all TocoFlags)
       * describes an aspect of the toco transformation process and thus of
       * the output file. The types of input arrays may be different between
       * the input and output files if quantization or dequantization occurred.
       * Such differences can only occur for real-number data i.e. only
       * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
       * </pre>
       *
       * <code>optional .toco.IODataType data_type = 5;</code>
       */
      public toco.Types.IODataType getDataType() {
        toco.Types.IODataType result = toco.Types.IODataType.valueOf(dataType_);
        return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Data type of the input.
       * In many graphs, the input arrays already have defined data types,
       * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
       * In those cases, it is not needed to specify this data_type flag.
       * The purpose of this flag is only to define the data type of input
       * arrays whose type isn't defined in the input graph file. For example,
       * when specifying an arbitrary (not Placeholder) --input_array into
       * a TensorFlow GraphDef.
       * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
       * corresponding quantization parameters are the mean_value, std_value
       * fields.
       * It is also important to understand the nuance between this data_type
       * flag and the inference_input_type in TocoFlags. The basic difference
       * is that this data_type (like all ModelFlags) describes a property
       * of the input graph, while inference_input_type (like all TocoFlags)
       * describes an aspect of the toco transformation process and thus of
       * the output file. The types of input arrays may be different between
       * the input and output files if quantization or dequantization occurred.
       * Such differences can only occur for real-number data i.e. only
       * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
       * </pre>
       *
       * <code>optional .toco.IODataType data_type = 5;</code>
       */
      public Builder setDataType(toco.Types.IODataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data type of the input.
       * In many graphs, the input arrays already have defined data types,
       * e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
       * In those cases, it is not needed to specify this data_type flag.
       * The purpose of this flag is only to define the data type of input
       * arrays whose type isn't defined in the input graph file. For example,
       * when specifying an arbitrary (not Placeholder) --input_array into
       * a TensorFlow GraphDef.
       * When this data_type is quantized (e.g. QUANTIZED_UINT8), the
       * corresponding quantization parameters are the mean_value, std_value
       * fields.
       * It is also important to understand the nuance between this data_type
       * flag and the inference_input_type in TocoFlags. The basic difference
       * is that this data_type (like all ModelFlags) describes a property
       * of the input graph, while inference_input_type (like all TocoFlags)
       * describes an aspect of the toco transformation process and thus of
       * the output file. The types of input arrays may be different between
       * the input and output files if quantization or dequantization occurred.
       * Such differences can only occur for real-number data i.e. only
       * between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
       * </pre>
       *
       * <code>optional .toco.IODataType data_type = 5;</code>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        dataType_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.InputArray)
    }

    // @@protoc_insertion_point(class_scope:toco.InputArray)
    private static final toco.ModelFlagsOuterClass.InputArray DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.InputArray();
    }

    public static toco.ModelFlagsOuterClass.InputArray getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<InputArray>
        PARSER = new com.google.protobuf.AbstractParser<InputArray>() {
      public InputArray parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new InputArray(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InputArray> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InputArray> getParserForType() {
      return PARSER;
    }

    public toco.ModelFlagsOuterClass.InputArray getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RnnStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.RnnState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string state_array = 1;</code>
     */
    boolean hasStateArray();
    /**
     * <code>optional string state_array = 1;</code>
     */
    java.lang.String getStateArray();
    /**
     * <code>optional string state_array = 1;</code>
     */
    com.google.protobuf.ByteString
        getStateArrayBytes();

    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    boolean hasBackEdgeSourceArray();
    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    java.lang.String getBackEdgeSourceArray();
    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    com.google.protobuf.ByteString
        getBackEdgeSourceArrayBytes();

    /**
     * <code>optional bool discardable = 5;</code>
     */
    boolean hasDiscardable();
    /**
     * <code>optional bool discardable = 5;</code>
     */
    boolean getDiscardable();

    /**
     * <pre>
     * size allows to specify a 1-D shape for the RNN state array.
     * Will be expanded with 1's to fit the model.
     * TODO(benoitjacob): should allow a generic, explicit shape.
     * </pre>
     *
     * <code>optional int32 size = 3;</code>
     */
    boolean hasSize();
    /**
     * <pre>
     * size allows to specify a 1-D shape for the RNN state array.
     * Will be expanded with 1's to fit the model.
     * TODO(benoitjacob): should allow a generic, explicit shape.
     * </pre>
     *
     * <code>optional int32 size = 3;</code>
     */
    int getSize();
  }
  /**
   * Protobuf type {@code toco.RnnState}
   */
  public  static final class RnnState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.RnnState)
      RnnStateOrBuilder {
    // Use RnnState.newBuilder() to construct.
    private RnnState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RnnState() {
      stateArray_ = "";
      backEdgeSourceArray_ = "";
      discardable_ = false;
      size_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RnnState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              stateArray_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              backEdgeSourceArray_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              size_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              discardable_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.ModelFlagsOuterClass.internal_static_toco_RnnState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.ModelFlagsOuterClass.internal_static_toco_RnnState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.ModelFlagsOuterClass.RnnState.class, toco.ModelFlagsOuterClass.RnnState.Builder.class);
    }

    private int bitField0_;
    public static final int STATE_ARRAY_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateArray_;
    /**
     * <code>optional string state_array = 1;</code>
     */
    public boolean hasStateArray() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string state_array = 1;</code>
     */
    public java.lang.String getStateArray() {
      java.lang.Object ref = stateArray_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stateArray_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string state_array = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStateArrayBytes() {
      java.lang.Object ref = stateArray_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateArray_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BACK_EDGE_SOURCE_ARRAY_FIELD_NUMBER = 2;
    private volatile java.lang.Object backEdgeSourceArray_;
    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    public boolean hasBackEdgeSourceArray() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    public java.lang.String getBackEdgeSourceArray() {
      java.lang.Object ref = backEdgeSourceArray_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          backEdgeSourceArray_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string back_edge_source_array = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBackEdgeSourceArrayBytes() {
      java.lang.Object ref = backEdgeSourceArray_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        backEdgeSourceArray_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISCARDABLE_FIELD_NUMBER = 5;
    private boolean discardable_;
    /**
     * <code>optional bool discardable = 5;</code>
     */
    public boolean hasDiscardable() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool discardable = 5;</code>
     */
    public boolean getDiscardable() {
      return discardable_;
    }

    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <pre>
     * size allows to specify a 1-D shape for the RNN state array.
     * Will be expanded with 1's to fit the model.
     * TODO(benoitjacob): should allow a generic, explicit shape.
     * </pre>
     *
     * <code>optional int32 size = 3;</code>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * size allows to specify a 1-D shape for the RNN state array.
     * Will be expanded with 1's to fit the model.
     * TODO(benoitjacob): should allow a generic, explicit shape.
     * </pre>
     *
     * <code>optional int32 size = 3;</code>
     */
    public int getSize() {
      return size_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateArray_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, backEdgeSourceArray_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(3, size_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(5, discardable_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateArray_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, backEdgeSourceArray_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, size_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, discardable_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.ModelFlagsOuterClass.RnnState)) {
        return super.equals(obj);
      }
      toco.ModelFlagsOuterClass.RnnState other = (toco.ModelFlagsOuterClass.RnnState) obj;

      boolean result = true;
      result = result && (hasStateArray() == other.hasStateArray());
      if (hasStateArray()) {
        result = result && getStateArray()
            .equals(other.getStateArray());
      }
      result = result && (hasBackEdgeSourceArray() == other.hasBackEdgeSourceArray());
      if (hasBackEdgeSourceArray()) {
        result = result && getBackEdgeSourceArray()
            .equals(other.getBackEdgeSourceArray());
      }
      result = result && (hasDiscardable() == other.hasDiscardable());
      if (hasDiscardable()) {
        result = result && (getDiscardable()
            == other.getDiscardable());
      }
      result = result && (hasSize() == other.hasSize());
      if (hasSize()) {
        result = result && (getSize()
            == other.getSize());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStateArray()) {
        hash = (37 * hash) + STATE_ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + getStateArray().hashCode();
      }
      if (hasBackEdgeSourceArray()) {
        hash = (37 * hash) + BACK_EDGE_SOURCE_ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + getBackEdgeSourceArray().hashCode();
      }
      if (hasDiscardable()) {
        hash = (37 * hash) + DISCARDABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDiscardable());
      }
      if (hasSize()) {
        hash = (37 * hash) + SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getSize();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.RnnState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.ModelFlagsOuterClass.RnnState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code toco.RnnState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.RnnState)
        toco.ModelFlagsOuterClass.RnnStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_RnnState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_RnnState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.RnnState.class, toco.ModelFlagsOuterClass.RnnState.Builder.class);
      }

      // Construct using toco.ModelFlagsOuterClass.RnnState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        stateArray_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        backEdgeSourceArray_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        discardable_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.ModelFlagsOuterClass.internal_static_toco_RnnState_descriptor;
      }

      public toco.ModelFlagsOuterClass.RnnState getDefaultInstanceForType() {
        return toco.ModelFlagsOuterClass.RnnState.getDefaultInstance();
      }

      public toco.ModelFlagsOuterClass.RnnState build() {
        toco.ModelFlagsOuterClass.RnnState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.ModelFlagsOuterClass.RnnState buildPartial() {
        toco.ModelFlagsOuterClass.RnnState result = new toco.ModelFlagsOuterClass.RnnState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stateArray_ = stateArray_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.backEdgeSourceArray_ = backEdgeSourceArray_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.discardable_ = discardable_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.size_ = size_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.ModelFlagsOuterClass.RnnState) {
          return mergeFrom((toco.ModelFlagsOuterClass.RnnState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.ModelFlagsOuterClass.RnnState other) {
        if (other == toco.ModelFlagsOuterClass.RnnState.getDefaultInstance()) return this;
        if (other.hasStateArray()) {
          bitField0_ |= 0x00000001;
          stateArray_ = other.stateArray_;
          onChanged();
        }
        if (other.hasBackEdgeSourceArray()) {
          bitField0_ |= 0x00000002;
          backEdgeSourceArray_ = other.backEdgeSourceArray_;
          onChanged();
        }
        if (other.hasDiscardable()) {
          setDiscardable(other.getDiscardable());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.ModelFlagsOuterClass.RnnState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.ModelFlagsOuterClass.RnnState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object stateArray_ = "";
      /**
       * <code>optional string state_array = 1;</code>
       */
      public boolean hasStateArray() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string state_array = 1;</code>
       */
      public java.lang.String getStateArray() {
        java.lang.Object ref = stateArray_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stateArray_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string state_array = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStateArrayBytes() {
        java.lang.Object ref = stateArray_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateArray_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string state_array = 1;</code>
       */
      public Builder setStateArray(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stateArray_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string state_array = 1;</code>
       */
      public Builder clearStateArray() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stateArray_ = getDefaultInstance().getStateArray();
        onChanged();
        return this;
      }
      /**
       * <code>optional string state_array = 1;</code>
       */
      public Builder setStateArrayBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stateArray_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object backEdgeSourceArray_ = "";
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public boolean hasBackEdgeSourceArray() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public java.lang.String getBackEdgeSourceArray() {
        java.lang.Object ref = backEdgeSourceArray_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            backEdgeSourceArray_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBackEdgeSourceArrayBytes() {
        java.lang.Object ref = backEdgeSourceArray_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backEdgeSourceArray_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public Builder setBackEdgeSourceArray(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        backEdgeSourceArray_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public Builder clearBackEdgeSourceArray() {
        bitField0_ = (bitField0_ & ~0x00000002);
        backEdgeSourceArray_ = getDefaultInstance().getBackEdgeSourceArray();
        onChanged();
        return this;
      }
      /**
       * <code>optional string back_edge_source_array = 2;</code>
       */
      public Builder setBackEdgeSourceArrayBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        backEdgeSourceArray_ = value;
        onChanged();
        return this;
      }

      private boolean discardable_ ;
      /**
       * <code>optional bool discardable = 5;</code>
       */
      public boolean hasDiscardable() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool discardable = 5;</code>
       */
      public boolean getDiscardable() {
        return discardable_;
      }
      /**
       * <code>optional bool discardable = 5;</code>
       */
      public Builder setDiscardable(boolean value) {
        bitField0_ |= 0x00000004;
        discardable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool discardable = 5;</code>
       */
      public Builder clearDiscardable() {
        bitField0_ = (bitField0_ & ~0x00000004);
        discardable_ = false;
        onChanged();
        return this;
      }

      private int size_ ;
      /**
       * <pre>
       * size allows to specify a 1-D shape for the RNN state array.
       * Will be expanded with 1's to fit the model.
       * TODO(benoitjacob): should allow a generic, explicit shape.
       * </pre>
       *
       * <code>optional int32 size = 3;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * size allows to specify a 1-D shape for the RNN state array.
       * Will be expanded with 1's to fit the model.
       * TODO(benoitjacob): should allow a generic, explicit shape.
       * </pre>
       *
       * <code>optional int32 size = 3;</code>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <pre>
       * size allows to specify a 1-D shape for the RNN state array.
       * Will be expanded with 1's to fit the model.
       * TODO(benoitjacob): should allow a generic, explicit shape.
       * </pre>
       *
       * <code>optional int32 size = 3;</code>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000008;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * size allows to specify a 1-D shape for the RNN state array.
       * Will be expanded with 1's to fit the model.
       * TODO(benoitjacob): should allow a generic, explicit shape.
       * </pre>
       *
       * <code>optional int32 size = 3;</code>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        size_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.RnnState)
    }

    // @@protoc_insertion_point(class_scope:toco.RnnState)
    private static final toco.ModelFlagsOuterClass.RnnState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.RnnState();
    }

    public static toco.ModelFlagsOuterClass.RnnState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RnnState>
        PARSER = new com.google.protobuf.AbstractParser<RnnState>() {
      public RnnState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new RnnState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RnnState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RnnState> getParserForType() {
      return PARSER;
    }

    public toco.ModelFlagsOuterClass.RnnState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ArraysExtraInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.ArraysExtraInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> 
        getEntriesList();
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getEntries(int index);
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    int getEntriesCount();
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    java.util.List<? extends toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder> 
        getEntriesOrBuilderList();
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder getEntriesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * An ArraysExtraInfo message stores a collection of additional Information
   * about arrays in a model, complementing the information in the model itself.
   * It is intentionally a separate message so that it may be serialized and
   * passed separately from the model. See --arrays_extra_info_file.
   * A typical use case is to manually specify MinMax for specific arrays in a
   * model that does not already contain such MinMax information.
   * </pre>
   *
   * Protobuf type {@code toco.ArraysExtraInfo}
   */
  public  static final class ArraysExtraInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.ArraysExtraInfo)
      ArraysExtraInfoOrBuilder {
    // Use ArraysExtraInfo.newBuilder() to construct.
    private ArraysExtraInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArraysExtraInfo() {
      entries_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ArraysExtraInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                entries_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry>();
                mutable_bitField0_ |= 0x00000001;
              }
              entries_.add(
                  input.readMessage(toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          entries_ = java.util.Collections.unmodifiableList(entries_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.ModelFlagsOuterClass.ArraysExtraInfo.class, toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder.class);
    }

    public interface EntryOrBuilder extends
        // @@protoc_insertion_point(interface_extends:toco.ArraysExtraInfo.Entry)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      boolean hasName();
      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>optional double min = 2;</code>
       */
      boolean hasMin();
      /**
       * <code>optional double min = 2;</code>
       */
      double getMin();

      /**
       * <code>optional double max = 3;</code>
       */
      boolean hasMax();
      /**
       * <code>optional double max = 3;</code>
       */
      double getMax();

      /**
       * <code>optional .toco.IODataType data_type = 4;</code>
       */
      boolean hasDataType();
      /**
       * <code>optional .toco.IODataType data_type = 4;</code>
       */
      toco.Types.IODataType getDataType();

      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      boolean hasShape();
      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      toco.ModelFlagsOuterClass.InputArrayShape getShape();
      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder();

      /**
       * <code>optional float constant_float_value = 6;</code>
       */
      boolean hasConstantFloatValue();
      /**
       * <code>optional float constant_float_value = 6;</code>
       */
      float getConstantFloatValue();
    }
    /**
     * Protobuf type {@code toco.ArraysExtraInfo.Entry}
     */
    public  static final class Entry extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:toco.ArraysExtraInfo.Entry)
        EntryOrBuilder {
      // Use Entry.newBuilder() to construct.
      private Entry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Entry() {
        name_ = "";
        min_ = 0D;
        max_ = 0D;
        dataType_ = 0;
        constantFloatValue_ = 0F;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Entry(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                name_ = bs;
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                min_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                max_ = input.readDouble();
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                toco.Types.IODataType value = toco.Types.IODataType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  dataType_ = rawValue;
                }
                break;
              }
              case 42: {
                toco.ModelFlagsOuterClass.InputArrayShape.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = shape_.toBuilder();
                }
                shape_ = input.readMessage(toco.ModelFlagsOuterClass.InputArrayShape.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(shape_);
                  shape_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 53: {
                bitField0_ |= 0x00000020;
                constantFloatValue_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_Entry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_Entry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.class, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder.class);
      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Next ID to use: 7.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MIN_FIELD_NUMBER = 2;
      private double min_;
      /**
       * <code>optional double min = 2;</code>
       */
      public boolean hasMin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double min = 2;</code>
       */
      public double getMin() {
        return min_;
      }

      public static final int MAX_FIELD_NUMBER = 3;
      private double max_;
      /**
       * <code>optional double max = 3;</code>
       */
      public boolean hasMax() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double max = 3;</code>
       */
      public double getMax() {
        return max_;
      }

      public static final int DATA_TYPE_FIELD_NUMBER = 4;
      private int dataType_;
      /**
       * <code>optional .toco.IODataType data_type = 4;</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .toco.IODataType data_type = 4;</code>
       */
      public toco.Types.IODataType getDataType() {
        toco.Types.IODataType result = toco.Types.IODataType.valueOf(dataType_);
        return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
      }

      public static final int SHAPE_FIELD_NUMBER = 5;
      private toco.ModelFlagsOuterClass.InputArrayShape shape_;
      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayShape getShape() {
        return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
      }
      /**
       * <code>optional .toco.InputArrayShape shape = 5;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder() {
        return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
      }

      public static final int CONSTANT_FLOAT_VALUE_FIELD_NUMBER = 6;
      private float constantFloatValue_;
      /**
       * <code>optional float constant_float_value = 6;</code>
       */
      public boolean hasConstantFloatValue() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float constant_float_value = 6;</code>
       */
      public float getConstantFloatValue() {
        return constantFloatValue_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, min_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, max_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeEnum(4, dataType_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, getShape());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeFloat(6, constantFloatValue_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, min_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, max_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, dataType_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getShape());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, constantFloatValue_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry)) {
          return super.equals(obj);
        }
        toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry other = (toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry) obj;

        boolean result = true;
        result = result && (hasName() == other.hasName());
        if (hasName()) {
          result = result && getName()
              .equals(other.getName());
        }
        result = result && (hasMin() == other.hasMin());
        if (hasMin()) {
          result = result && (
              java.lang.Double.doubleToLongBits(getMin())
              == java.lang.Double.doubleToLongBits(
                  other.getMin()));
        }
        result = result && (hasMax() == other.hasMax());
        if (hasMax()) {
          result = result && (
              java.lang.Double.doubleToLongBits(getMax())
              == java.lang.Double.doubleToLongBits(
                  other.getMax()));
        }
        result = result && (hasDataType() == other.hasDataType());
        if (hasDataType()) {
          result = result && dataType_ == other.dataType_;
        }
        result = result && (hasShape() == other.hasShape());
        if (hasShape()) {
          result = result && getShape()
              .equals(other.getShape());
        }
        result = result && (hasConstantFloatValue() == other.hasConstantFloatValue());
        if (hasConstantFloatValue()) {
          result = result && (
              java.lang.Float.floatToIntBits(getConstantFloatValue())
              == java.lang.Float.floatToIntBits(
                  other.getConstantFloatValue()));
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasName()) {
          hash = (37 * hash) + NAME_FIELD_NUMBER;
          hash = (53 * hash) + getName().hashCode();
        }
        if (hasMin()) {
          hash = (37 * hash) + MIN_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getMin()));
        }
        if (hasMax()) {
          hash = (37 * hash) + MAX_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getMax()));
        }
        if (hasDataType()) {
          hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + dataType_;
        }
        if (hasShape()) {
          hash = (37 * hash) + SHAPE_FIELD_NUMBER;
          hash = (53 * hash) + getShape().hashCode();
        }
        if (hasConstantFloatValue()) {
          hash = (37 * hash) + CONSTANT_FLOAT_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + java.lang.Float.floatToIntBits(
              getConstantFloatValue());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code toco.ArraysExtraInfo.Entry}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:toco.ArraysExtraInfo.Entry)
          toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_Entry_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_Entry_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.class, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder.class);
        }

        // Construct using toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getShapeFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          min_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          max_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          dataType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          if (shapeBuilder_ == null) {
            shape_ = null;
          } else {
            shapeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          constantFloatValue_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_Entry_descriptor;
        }

        public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getDefaultInstanceForType() {
          return toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.getDefaultInstance();
        }

        public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry build() {
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry buildPartial() {
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry result = new toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.min_ = min_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.max_ = max_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.dataType_ = dataType_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (shapeBuilder_ == null) {
            result.shape_ = shape_;
          } else {
            result.shape_ = shapeBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.constantFloatValue_ = constantFloatValue_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry) {
            return mergeFrom((toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry other) {
          if (other == toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.getDefaultInstance()) return this;
          if (other.hasName()) {
            bitField0_ |= 0x00000001;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasMin()) {
            setMin(other.getMin());
          }
          if (other.hasMax()) {
            setMax(other.getMax());
          }
          if (other.hasDataType()) {
            setDataType(other.getDataType());
          }
          if (other.hasShape()) {
            mergeShape(other.getShape());
          }
          if (other.hasConstantFloatValue()) {
            setConstantFloatValue(other.getConstantFloatValue());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Next ID to use: 7.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }

        private double min_ ;
        /**
         * <code>optional double min = 2;</code>
         */
        public boolean hasMin() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double min = 2;</code>
         */
        public double getMin() {
          return min_;
        }
        /**
         * <code>optional double min = 2;</code>
         */
        public Builder setMin(double value) {
          bitField0_ |= 0x00000002;
          min_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double min = 2;</code>
         */
        public Builder clearMin() {
          bitField0_ = (bitField0_ & ~0x00000002);
          min_ = 0D;
          onChanged();
          return this;
        }

        private double max_ ;
        /**
         * <code>optional double max = 3;</code>
         */
        public boolean hasMax() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double max = 3;</code>
         */
        public double getMax() {
          return max_;
        }
        /**
         * <code>optional double max = 3;</code>
         */
        public Builder setMax(double value) {
          bitField0_ |= 0x00000004;
          max_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double max = 3;</code>
         */
        public Builder clearMax() {
          bitField0_ = (bitField0_ & ~0x00000004);
          max_ = 0D;
          onChanged();
          return this;
        }

        private int dataType_ = 0;
        /**
         * <code>optional .toco.IODataType data_type = 4;</code>
         */
        public boolean hasDataType() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .toco.IODataType data_type = 4;</code>
         */
        public toco.Types.IODataType getDataType() {
          toco.Types.IODataType result = toco.Types.IODataType.valueOf(dataType_);
          return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
        }
        /**
         * <code>optional .toco.IODataType data_type = 4;</code>
         */
        public Builder setDataType(toco.Types.IODataType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          dataType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>optional .toco.IODataType data_type = 4;</code>
         */
        public Builder clearDataType() {
          bitField0_ = (bitField0_ & ~0x00000008);
          dataType_ = 0;
          onChanged();
          return this;
        }

        private toco.ModelFlagsOuterClass.InputArrayShape shape_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder> shapeBuilder_;
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public boolean hasShape() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public toco.ModelFlagsOuterClass.InputArrayShape getShape() {
          if (shapeBuilder_ == null) {
            return shape_ == null ? toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
          } else {
            return shapeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public Builder setShape(toco.ModelFlagsOuterClass.InputArrayShape value) {
          if (shapeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            shape_ = value;
            onChanged();
          } else {
            shapeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public Builder setShape(
            toco.ModelFlagsOuterClass.InputArrayShape.Builder builderForValue) {
          if (shapeBuilder_ == null) {
            shape_ = builderForValue.build();
            onChanged();
          } else {
            shapeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public Builder mergeShape(toco.ModelFlagsOuterClass.InputArrayShape value) {
          if (shapeBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                shape_ != null &&
                shape_ != toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance()) {
              shape_ =
                toco.ModelFlagsOuterClass.InputArrayShape.newBuilder(shape_).mergeFrom(value).buildPartial();
            } else {
              shape_ = value;
            }
            onChanged();
          } else {
            shapeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public Builder clearShape() {
          if (shapeBuilder_ == null) {
            shape_ = null;
            onChanged();
          } else {
            shapeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public toco.ModelFlagsOuterClass.InputArrayShape.Builder getShapeBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getShapeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        public toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder getShapeOrBuilder() {
          if (shapeBuilder_ != null) {
            return shapeBuilder_.getMessageOrBuilder();
          } else {
            return shape_ == null ?
                toco.ModelFlagsOuterClass.InputArrayShape.getDefaultInstance() : shape_;
          }
        }
        /**
         * <code>optional .toco.InputArrayShape shape = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder> 
            getShapeFieldBuilder() {
          if (shapeBuilder_ == null) {
            shapeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                toco.ModelFlagsOuterClass.InputArrayShape, toco.ModelFlagsOuterClass.InputArrayShape.Builder, toco.ModelFlagsOuterClass.InputArrayShapeOrBuilder>(
                    getShape(),
                    getParentForChildren(),
                    isClean());
            shape_ = null;
          }
          return shapeBuilder_;
        }

        private float constantFloatValue_ ;
        /**
         * <code>optional float constant_float_value = 6;</code>
         */
        public boolean hasConstantFloatValue() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional float constant_float_value = 6;</code>
         */
        public float getConstantFloatValue() {
          return constantFloatValue_;
        }
        /**
         * <code>optional float constant_float_value = 6;</code>
         */
        public Builder setConstantFloatValue(float value) {
          bitField0_ |= 0x00000020;
          constantFloatValue_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float constant_float_value = 6;</code>
         */
        public Builder clearConstantFloatValue() {
          bitField0_ = (bitField0_ & ~0x00000020);
          constantFloatValue_ = 0F;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:toco.ArraysExtraInfo.Entry)
      }

      // @@protoc_insertion_point(class_scope:toco.ArraysExtraInfo.Entry)
      private static final toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry();
      }

      public static toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Entry>
          PARSER = new com.google.protobuf.AbstractParser<Entry>() {
        public Entry parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Entry(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Entry> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Entry> getParserForType() {
        return PARSER;
      }

      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int ENTRIES_FIELD_NUMBER = 1;
    private java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> entries_;
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    public java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> getEntriesList() {
      return entries_;
    }
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    public java.util.List<? extends toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder> 
        getEntriesOrBuilderList() {
      return entries_;
    }
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    public int getEntriesCount() {
      return entries_.size();
    }
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getEntries(int index) {
      return entries_.get(index);
    }
    /**
     * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
     */
    public toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder getEntriesOrBuilder(
        int index) {
      return entries_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entries_.size(); i++) {
        output.writeMessage(1, entries_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entries_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, entries_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.ModelFlagsOuterClass.ArraysExtraInfo)) {
        return super.equals(obj);
      }
      toco.ModelFlagsOuterClass.ArraysExtraInfo other = (toco.ModelFlagsOuterClass.ArraysExtraInfo) obj;

      boolean result = true;
      result = result && getEntriesList()
          .equals(other.getEntriesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntriesCount() > 0) {
        hash = (37 * hash) + ENTRIES_FIELD_NUMBER;
        hash = (53 * hash) + getEntriesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ArraysExtraInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.ModelFlagsOuterClass.ArraysExtraInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An ArraysExtraInfo message stores a collection of additional Information
     * about arrays in a model, complementing the information in the model itself.
     * It is intentionally a separate message so that it may be serialized and
     * passed separately from the model. See --arrays_extra_info_file.
     * A typical use case is to manually specify MinMax for specific arrays in a
     * model that does not already contain such MinMax information.
     * </pre>
     *
     * Protobuf type {@code toco.ArraysExtraInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.ArraysExtraInfo)
        toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.ArraysExtraInfo.class, toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder.class);
      }

      // Construct using toco.ModelFlagsOuterClass.ArraysExtraInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEntriesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          entriesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ArraysExtraInfo_descriptor;
      }

      public toco.ModelFlagsOuterClass.ArraysExtraInfo getDefaultInstanceForType() {
        return toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance();
      }

      public toco.ModelFlagsOuterClass.ArraysExtraInfo build() {
        toco.ModelFlagsOuterClass.ArraysExtraInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.ModelFlagsOuterClass.ArraysExtraInfo buildPartial() {
        toco.ModelFlagsOuterClass.ArraysExtraInfo result = new toco.ModelFlagsOuterClass.ArraysExtraInfo(this);
        int from_bitField0_ = bitField0_;
        if (entriesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            entries_ = java.util.Collections.unmodifiableList(entries_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entries_ = entries_;
        } else {
          result.entries_ = entriesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.ModelFlagsOuterClass.ArraysExtraInfo) {
          return mergeFrom((toco.ModelFlagsOuterClass.ArraysExtraInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.ModelFlagsOuterClass.ArraysExtraInfo other) {
        if (other == toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance()) return this;
        if (entriesBuilder_ == null) {
          if (!other.entries_.isEmpty()) {
            if (entries_.isEmpty()) {
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntriesIsMutable();
              entries_.addAll(other.entries_);
            }
            onChanged();
          }
        } else {
          if (!other.entries_.isEmpty()) {
            if (entriesBuilder_.isEmpty()) {
              entriesBuilder_.dispose();
              entriesBuilder_ = null;
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entriesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEntriesFieldBuilder() : null;
            } else {
              entriesBuilder_.addAllMessages(other.entries_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.ModelFlagsOuterClass.ArraysExtraInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.ModelFlagsOuterClass.ArraysExtraInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> entries_ =
        java.util.Collections.emptyList();
      private void ensureEntriesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          entries_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry>(entries_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder> entriesBuilder_;

      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> getEntriesList() {
        if (entriesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entries_);
        } else {
          return entriesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public int getEntriesCount() {
        if (entriesBuilder_ == null) {
          return entries_.size();
        } else {
          return entriesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry getEntries(int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);
        } else {
          return entriesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder setEntries(
          int index, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.set(index, value);
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder setEntries(
          int index, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.set(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder addEntries(toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder addEntries(
          int index, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(index, value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder addEntries(
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder addEntries(
          int index, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder addAllEntries(
          java.lang.Iterable<? extends toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry> values) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, entries_);
          onChanged();
        } else {
          entriesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder clearEntries() {
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entriesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public Builder removeEntries(int index) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.remove(index);
          onChanged();
        } else {
          entriesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder getEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder getEntriesOrBuilder(
          int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);  } else {
          return entriesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public java.util.List<? extends toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder> 
           getEntriesOrBuilderList() {
        if (entriesBuilder_ != null) {
          return entriesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entries_);
        }
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder addEntriesBuilder() {
        return getEntriesFieldBuilder().addBuilder(
            toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder addEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().addBuilder(
            index, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.ArraysExtraInfo.Entry entries = 1;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder> 
           getEntriesBuilderList() {
        return getEntriesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder> 
          getEntriesFieldBuilder() {
        if (entriesBuilder_ == null) {
          entriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry, toco.ModelFlagsOuterClass.ArraysExtraInfo.Entry.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfo.EntryOrBuilder>(
                  entries_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          entries_ = null;
        }
        return entriesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.ArraysExtraInfo)
    }

    // @@protoc_insertion_point(class_scope:toco.ArraysExtraInfo)
    private static final toco.ModelFlagsOuterClass.ArraysExtraInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.ArraysExtraInfo();
    }

    public static toco.ModelFlagsOuterClass.ArraysExtraInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ArraysExtraInfo>
        PARSER = new com.google.protobuf.AbstractParser<ArraysExtraInfo>() {
      public ArraysExtraInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ArraysExtraInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ArraysExtraInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ArraysExtraInfo> getParserForType() {
      return PARSER;
    }

    public toco.ModelFlagsOuterClass.ArraysExtraInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ModelFlagsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.ModelFlags)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    java.util.List<toco.ModelFlagsOuterClass.InputArray> 
        getInputArraysList();
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    toco.ModelFlagsOuterClass.InputArray getInputArrays(int index);
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    int getInputArraysCount();
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    java.util.List<? extends toco.ModelFlagsOuterClass.InputArrayOrBuilder> 
        getInputArraysOrBuilderList();
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    toco.ModelFlagsOuterClass.InputArrayOrBuilder getInputArraysOrBuilder(
        int index);

    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    java.util.List<java.lang.String>
        getOutputArraysList();
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    int getOutputArraysCount();
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    java.lang.String getOutputArrays(int index);
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    com.google.protobuf.ByteString
        getOutputArraysBytes(int index);

    /**
     * <pre>
     * If true, the model accepts an arbitrary batch size. Mutually exclusive with
     * the 'batch' field: at most one of these two fields can be set.
     * </pre>
     *
     * <code>optional bool variable_batch = 10;</code>
     */
    boolean hasVariableBatch();
    /**
     * <pre>
     * If true, the model accepts an arbitrary batch size. Mutually exclusive with
     * the 'batch' field: at most one of these two fields can be set.
     * </pre>
     *
     * <code>optional bool variable_batch = 10;</code>
     */
    boolean getVariableBatch();

    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    java.util.List<toco.ModelFlagsOuterClass.RnnState> 
        getRnnStatesList();
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    toco.ModelFlagsOuterClass.RnnState getRnnStates(int index);
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    int getRnnStatesCount();
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    java.util.List<? extends toco.ModelFlagsOuterClass.RnnStateOrBuilder> 
        getRnnStatesOrBuilderList();
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    toco.ModelFlagsOuterClass.RnnStateOrBuilder getRnnStatesOrBuilder(
        int index);

    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> 
        getModelChecksList();
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getModelChecks(int index);
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    int getModelChecksCount();
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    java.util.List<? extends toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder> 
        getModelChecksOrBuilderList();
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder getModelChecksOrBuilder(
        int index);

    /**
     * <pre>
     * If true, will allow passing inexistent arrays in --input_arrays
     * and --output_arrays. This makes little sense, is only useful to
     * more easily get graph visualizations.
     * </pre>
     *
     * <code>optional bool allow_nonexistent_arrays = 16;</code>
     */
    boolean hasAllowNonexistentArrays();
    /**
     * <pre>
     * If true, will allow passing inexistent arrays in --input_arrays
     * and --output_arrays. This makes little sense, is only useful to
     * more easily get graph visualizations.
     * </pre>
     *
     * <code>optional bool allow_nonexistent_arrays = 16;</code>
     */
    boolean getAllowNonexistentArrays();

    /**
     * <pre>
     * If true, will allow passing non-ascii-printable characters in
     * --input_arrays and --output_arrays. By default (if false), only
     * ascii printable characters are allowed, i.e. character codes
     * ranging from 32 to 127. This is disallowed by default so as to
     * catch common copy-and-paste issues where invisible unicode
     * characters are unwittingly added to these strings.
     * </pre>
     *
     * <code>optional bool allow_nonascii_arrays = 17;</code>
     */
    boolean hasAllowNonasciiArrays();
    /**
     * <pre>
     * If true, will allow passing non-ascii-printable characters in
     * --input_arrays and --output_arrays. By default (if false), only
     * ascii printable characters are allowed, i.e. character codes
     * ranging from 32 to 127. This is disallowed by default so as to
     * catch common copy-and-paste issues where invisible unicode
     * characters are unwittingly added to these strings.
     * </pre>
     *
     * <code>optional bool allow_nonascii_arrays = 17;</code>
     */
    boolean getAllowNonasciiArrays();

    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    boolean hasArraysExtraInfo();
    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    toco.ModelFlagsOuterClass.ArraysExtraInfo getArraysExtraInfo();
    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder getArraysExtraInfoOrBuilder();

    /**
     * <pre>
     * When set to false, toco will not change the input ranges and the output
     * ranges of concat operator to the overlap of all input ranges.
     * </pre>
     *
     * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
     */
    boolean hasChangeConcatInputRanges();
    /**
     * <pre>
     * When set to false, toco will not change the input ranges and the output
     * ranges of concat operator to the overlap of all input ranges.
     * </pre>
     *
     * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
     */
    boolean getChangeConcatInputRanges();
  }
  /**
   * <pre>
   * ModelFlags encodes properties of a model that, depending on the file
   * format, may or may not be recorded in the model file. The purpose of
   * representing these properties in ModelFlags is to allow passing them
   * separately from the input model file, for instance as command-line
   * parameters, so that we can offer a single uniform interface that can
   * handle files from different input formats.
   * For each of these properties, and each supported file format, we
   * detail in comments below whether the property exists in the given file
   * format.
   * Obsolete flags that have been removed:
   *   optional int32 input_depth = 3;
   *   optional int32 input_width = 4;
   *   optional int32 input_height = 5;
   *   optional int32 batch = 6 [ default = 1];
   *   optional float mean_value = 7;
   *   optional float std_value = 8 [default = 1.];
   *   optional int32 input_dims = 11 [ default = 4];
   *   repeated int32 input_shape = 13;
   * Next ID to USE: 20.
   * </pre>
   *
   * Protobuf type {@code toco.ModelFlags}
   */
  public  static final class ModelFlags extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.ModelFlags)
      ModelFlagsOrBuilder {
    // Use ModelFlags.newBuilder() to construct.
    private ModelFlags(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ModelFlags() {
      inputArrays_ = java.util.Collections.emptyList();
      outputArrays_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      variableBatch_ = false;
      rnnStates_ = java.util.Collections.emptyList();
      modelChecks_ = java.util.Collections.emptyList();
      allowNonexistentArrays_ = false;
      allowNonasciiArrays_ = false;
      changeConcatInputRanges_ = true;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ModelFlags(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                inputArrays_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.InputArray>();
                mutable_bitField0_ |= 0x00000001;
              }
              inputArrays_.add(
                  input.readMessage(toco.ModelFlagsOuterClass.InputArray.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                outputArrays_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              outputArrays_.add(bs);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000001;
              variableBatch_ = input.readBool();
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                rnnStates_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.RnnState>();
                mutable_bitField0_ |= 0x00000008;
              }
              rnnStates_.add(
                  input.readMessage(toco.ModelFlagsOuterClass.RnnState.PARSER, extensionRegistry));
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                modelChecks_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck>();
                mutable_bitField0_ |= 0x00000010;
              }
              modelChecks_.add(
                  input.readMessage(toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.PARSER, extensionRegistry));
              break;
            }
            case 128: {
              bitField0_ |= 0x00000002;
              allowNonexistentArrays_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000004;
              allowNonasciiArrays_ = input.readBool();
              break;
            }
            case 146: {
              toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = arraysExtraInfo_.toBuilder();
              }
              arraysExtraInfo_ = input.readMessage(toco.ModelFlagsOuterClass.ArraysExtraInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(arraysExtraInfo_);
                arraysExtraInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 152: {
              bitField0_ |= 0x00000010;
              changeConcatInputRanges_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          inputArrays_ = java.util.Collections.unmodifiableList(inputArrays_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          outputArrays_ = outputArrays_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          rnnStates_ = java.util.Collections.unmodifiableList(rnnStates_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          modelChecks_ = java.util.Collections.unmodifiableList(modelChecks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.ModelFlagsOuterClass.ModelFlags.class, toco.ModelFlagsOuterClass.ModelFlags.Builder.class);
    }

    public interface ModelCheckOrBuilder extends
        // @@protoc_insertion_point(interface_extends:toco.ModelFlags.ModelCheck)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      boolean hasCountType();
      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      java.lang.String getCountType();
      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      com.google.protobuf.ByteString
          getCountTypeBytes();

      /**
       * <pre>
       * A count of zero is a meaningful check, so negative used to mean disable.
       * </pre>
       *
       * <code>optional int32 count_min = 2 [default = -1];</code>
       */
      boolean hasCountMin();
      /**
       * <pre>
       * A count of zero is a meaningful check, so negative used to mean disable.
       * </pre>
       *
       * <code>optional int32 count_min = 2 [default = -1];</code>
       */
      int getCountMin();

      /**
       * <pre>
       * If count_max &lt; count_min, then count_min is only allowed value.
       * </pre>
       *
       * <code>optional int32 count_max = 3 [default = -1];</code>
       */
      boolean hasCountMax();
      /**
       * <pre>
       * If count_max &lt; count_min, then count_min is only allowed value.
       * </pre>
       *
       * <code>optional int32 count_max = 3 [default = -1];</code>
       */
      int getCountMax();
    }
    /**
     * <pre>
     * Checks applied to the model, typically after toco's comprehensive
     * graph transformations.
     * Next ID to USE: 4.
     * </pre>
     *
     * Protobuf type {@code toco.ModelFlags.ModelCheck}
     */
    public  static final class ModelCheck extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:toco.ModelFlags.ModelCheck)
        ModelCheckOrBuilder {
      // Use ModelCheck.newBuilder() to construct.
      private ModelCheck(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ModelCheck() {
        countType_ = "None";
        countMin_ = -1;
        countMax_ = -1;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ModelCheck(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                countType_ = bs;
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                countMin_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                countMax_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_ModelCheck_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_ModelCheck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.class, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder.class);
      }

      private int bitField0_;
      public static final int COUNT_TYPE_FIELD_NUMBER = 1;
      private volatile java.lang.Object countType_;
      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      public boolean hasCountType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      public java.lang.String getCountType() {
        java.lang.Object ref = countType_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            countType_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Use the name of a type of operator to check its counts.
       * Use "Total" for overall operator counts.
       * Use "Arrays" for overall array counts.
       * </pre>
       *
       * <code>optional string count_type = 1 [default = "None"];</code>
       */
      public com.google.protobuf.ByteString
          getCountTypeBytes() {
        java.lang.Object ref = countType_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          countType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int COUNT_MIN_FIELD_NUMBER = 2;
      private int countMin_;
      /**
       * <pre>
       * A count of zero is a meaningful check, so negative used to mean disable.
       * </pre>
       *
       * <code>optional int32 count_min = 2 [default = -1];</code>
       */
      public boolean hasCountMin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * A count of zero is a meaningful check, so negative used to mean disable.
       * </pre>
       *
       * <code>optional int32 count_min = 2 [default = -1];</code>
       */
      public int getCountMin() {
        return countMin_;
      }

      public static final int COUNT_MAX_FIELD_NUMBER = 3;
      private int countMax_;
      /**
       * <pre>
       * If count_max &lt; count_min, then count_min is only allowed value.
       * </pre>
       *
       * <code>optional int32 count_max = 3 [default = -1];</code>
       */
      public boolean hasCountMax() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If count_max &lt; count_min, then count_min is only allowed value.
       * </pre>
       *
       * <code>optional int32 count_max = 3 [default = -1];</code>
       */
      public int getCountMax() {
        return countMax_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, countType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, countMin_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, countMax_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, countType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, countMin_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, countMax_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof toco.ModelFlagsOuterClass.ModelFlags.ModelCheck)) {
          return super.equals(obj);
        }
        toco.ModelFlagsOuterClass.ModelFlags.ModelCheck other = (toco.ModelFlagsOuterClass.ModelFlags.ModelCheck) obj;

        boolean result = true;
        result = result && (hasCountType() == other.hasCountType());
        if (hasCountType()) {
          result = result && getCountType()
              .equals(other.getCountType());
        }
        result = result && (hasCountMin() == other.hasCountMin());
        if (hasCountMin()) {
          result = result && (getCountMin()
              == other.getCountMin());
        }
        result = result && (hasCountMax() == other.hasCountMax());
        if (hasCountMax()) {
          result = result && (getCountMax()
              == other.getCountMax());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasCountType()) {
          hash = (37 * hash) + COUNT_TYPE_FIELD_NUMBER;
          hash = (53 * hash) + getCountType().hashCode();
        }
        if (hasCountMin()) {
          hash = (37 * hash) + COUNT_MIN_FIELD_NUMBER;
          hash = (53 * hash) + getCountMin();
        }
        if (hasCountMax()) {
          hash = (37 * hash) + COUNT_MAX_FIELD_NUMBER;
          hash = (53 * hash) + getCountMax();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(toco.ModelFlagsOuterClass.ModelFlags.ModelCheck prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Checks applied to the model, typically after toco's comprehensive
       * graph transformations.
       * Next ID to USE: 4.
       * </pre>
       *
       * Protobuf type {@code toco.ModelFlags.ModelCheck}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:toco.ModelFlags.ModelCheck)
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_ModelCheck_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_ModelCheck_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.class, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder.class);
        }

        // Construct using toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          countType_ = "None";
          bitField0_ = (bitField0_ & ~0x00000001);
          countMin_ = -1;
          bitField0_ = (bitField0_ & ~0x00000002);
          countMax_ = -1;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_ModelCheck_descriptor;
        }

        public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getDefaultInstanceForType() {
          return toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.getDefaultInstance();
        }

        public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck build() {
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck buildPartial() {
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck result = new toco.ModelFlagsOuterClass.ModelFlags.ModelCheck(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.countType_ = countType_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.countMin_ = countMin_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.countMax_ = countMax_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof toco.ModelFlagsOuterClass.ModelFlags.ModelCheck) {
            return mergeFrom((toco.ModelFlagsOuterClass.ModelFlags.ModelCheck)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(toco.ModelFlagsOuterClass.ModelFlags.ModelCheck other) {
          if (other == toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.getDefaultInstance()) return this;
          if (other.hasCountType()) {
            bitField0_ |= 0x00000001;
            countType_ = other.countType_;
            onChanged();
          }
          if (other.hasCountMin()) {
            setCountMin(other.getCountMin());
          }
          if (other.hasCountMax()) {
            setCountMax(other.getCountMax());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (toco.ModelFlagsOuterClass.ModelFlags.ModelCheck) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object countType_ = "None";
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public boolean hasCountType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public java.lang.String getCountType() {
          java.lang.Object ref = countType_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              countType_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public com.google.protobuf.ByteString
            getCountTypeBytes() {
          java.lang.Object ref = countType_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            countType_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public Builder setCountType(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          countType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public Builder clearCountType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          countType_ = getDefaultInstance().getCountType();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Use the name of a type of operator to check its counts.
         * Use "Total" for overall operator counts.
         * Use "Arrays" for overall array counts.
         * </pre>
         *
         * <code>optional string count_type = 1 [default = "None"];</code>
         */
        public Builder setCountTypeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          countType_ = value;
          onChanged();
          return this;
        }

        private int countMin_ = -1;
        /**
         * <pre>
         * A count of zero is a meaningful check, so negative used to mean disable.
         * </pre>
         *
         * <code>optional int32 count_min = 2 [default = -1];</code>
         */
        public boolean hasCountMin() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * A count of zero is a meaningful check, so negative used to mean disable.
         * </pre>
         *
         * <code>optional int32 count_min = 2 [default = -1];</code>
         */
        public int getCountMin() {
          return countMin_;
        }
        /**
         * <pre>
         * A count of zero is a meaningful check, so negative used to mean disable.
         * </pre>
         *
         * <code>optional int32 count_min = 2 [default = -1];</code>
         */
        public Builder setCountMin(int value) {
          bitField0_ |= 0x00000002;
          countMin_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A count of zero is a meaningful check, so negative used to mean disable.
         * </pre>
         *
         * <code>optional int32 count_min = 2 [default = -1];</code>
         */
        public Builder clearCountMin() {
          bitField0_ = (bitField0_ & ~0x00000002);
          countMin_ = -1;
          onChanged();
          return this;
        }

        private int countMax_ = -1;
        /**
         * <pre>
         * If count_max &lt; count_min, then count_min is only allowed value.
         * </pre>
         *
         * <code>optional int32 count_max = 3 [default = -1];</code>
         */
        public boolean hasCountMax() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * If count_max &lt; count_min, then count_min is only allowed value.
         * </pre>
         *
         * <code>optional int32 count_max = 3 [default = -1];</code>
         */
        public int getCountMax() {
          return countMax_;
        }
        /**
         * <pre>
         * If count_max &lt; count_min, then count_min is only allowed value.
         * </pre>
         *
         * <code>optional int32 count_max = 3 [default = -1];</code>
         */
        public Builder setCountMax(int value) {
          bitField0_ |= 0x00000004;
          countMax_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If count_max &lt; count_min, then count_min is only allowed value.
         * </pre>
         *
         * <code>optional int32 count_max = 3 [default = -1];</code>
         */
        public Builder clearCountMax() {
          bitField0_ = (bitField0_ & ~0x00000004);
          countMax_ = -1;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:toco.ModelFlags.ModelCheck)
      }

      // @@protoc_insertion_point(class_scope:toco.ModelFlags.ModelCheck)
      private static final toco.ModelFlagsOuterClass.ModelFlags.ModelCheck DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.ModelFlags.ModelCheck();
      }

      public static toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ModelCheck>
          PARSER = new com.google.protobuf.AbstractParser<ModelCheck>() {
        public ModelCheck parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new ModelCheck(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ModelCheck> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ModelCheck> getParserForType() {
        return PARSER;
      }

      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int INPUT_ARRAYS_FIELD_NUMBER = 1;
    private java.util.List<toco.ModelFlagsOuterClass.InputArray> inputArrays_;
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    public java.util.List<toco.ModelFlagsOuterClass.InputArray> getInputArraysList() {
      return inputArrays_;
    }
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    public java.util.List<? extends toco.ModelFlagsOuterClass.InputArrayOrBuilder> 
        getInputArraysOrBuilderList() {
      return inputArrays_;
    }
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    public int getInputArraysCount() {
      return inputArrays_.size();
    }
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    public toco.ModelFlagsOuterClass.InputArray getInputArrays(int index) {
      return inputArrays_.get(index);
    }
    /**
     * <pre>
     * Information about the input arrays, i.e. the arrays from which input
     * activations will be read.
     * </pre>
     *
     * <code>repeated .toco.InputArray input_arrays = 1;</code>
     */
    public toco.ModelFlagsOuterClass.InputArrayOrBuilder getInputArraysOrBuilder(
        int index) {
      return inputArrays_.get(index);
    }

    public static final int OUTPUT_ARRAYS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList outputArrays_;
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOutputArraysList() {
      return outputArrays_;
    }
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    public int getOutputArraysCount() {
      return outputArrays_.size();
    }
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    public java.lang.String getOutputArrays(int index) {
      return outputArrays_.get(index);
    }
    /**
     * <pre>
     * Name of the output arrays, i.e. the arrays into which output activations
     * will be written.
     * </pre>
     *
     * <code>repeated string output_arrays = 2;</code>
     */
    public com.google.protobuf.ByteString
        getOutputArraysBytes(int index) {
      return outputArrays_.getByteString(index);
    }

    public static final int VARIABLE_BATCH_FIELD_NUMBER = 10;
    private boolean variableBatch_;
    /**
     * <pre>
     * If true, the model accepts an arbitrary batch size. Mutually exclusive with
     * the 'batch' field: at most one of these two fields can be set.
     * </pre>
     *
     * <code>optional bool variable_batch = 10;</code>
     */
    public boolean hasVariableBatch() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * If true, the model accepts an arbitrary batch size. Mutually exclusive with
     * the 'batch' field: at most one of these two fields can be set.
     * </pre>
     *
     * <code>optional bool variable_batch = 10;</code>
     */
    public boolean getVariableBatch() {
      return variableBatch_;
    }

    public static final int RNN_STATES_FIELD_NUMBER = 12;
    private java.util.List<toco.ModelFlagsOuterClass.RnnState> rnnStates_;
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    public java.util.List<toco.ModelFlagsOuterClass.RnnState> getRnnStatesList() {
      return rnnStates_;
    }
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    public java.util.List<? extends toco.ModelFlagsOuterClass.RnnStateOrBuilder> 
        getRnnStatesOrBuilderList() {
      return rnnStates_;
    }
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    public int getRnnStatesCount() {
      return rnnStates_.size();
    }
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    public toco.ModelFlagsOuterClass.RnnState getRnnStates(int index) {
      return rnnStates_.get(index);
    }
    /**
     * <code>repeated .toco.RnnState rnn_states = 12;</code>
     */
    public toco.ModelFlagsOuterClass.RnnStateOrBuilder getRnnStatesOrBuilder(
        int index) {
      return rnnStates_.get(index);
    }

    public static final int MODEL_CHECKS_FIELD_NUMBER = 14;
    private java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> modelChecks_;
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    public java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> getModelChecksList() {
      return modelChecks_;
    }
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    public java.util.List<? extends toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder> 
        getModelChecksOrBuilderList() {
      return modelChecks_;
    }
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    public int getModelChecksCount() {
      return modelChecks_.size();
    }
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getModelChecks(int index) {
      return modelChecks_.get(index);
    }
    /**
     * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
     */
    public toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder getModelChecksOrBuilder(
        int index) {
      return modelChecks_.get(index);
    }

    public static final int ALLOW_NONEXISTENT_ARRAYS_FIELD_NUMBER = 16;
    private boolean allowNonexistentArrays_;
    /**
     * <pre>
     * If true, will allow passing inexistent arrays in --input_arrays
     * and --output_arrays. This makes little sense, is only useful to
     * more easily get graph visualizations.
     * </pre>
     *
     * <code>optional bool allow_nonexistent_arrays = 16;</code>
     */
    public boolean hasAllowNonexistentArrays() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * If true, will allow passing inexistent arrays in --input_arrays
     * and --output_arrays. This makes little sense, is only useful to
     * more easily get graph visualizations.
     * </pre>
     *
     * <code>optional bool allow_nonexistent_arrays = 16;</code>
     */
    public boolean getAllowNonexistentArrays() {
      return allowNonexistentArrays_;
    }

    public static final int ALLOW_NONASCII_ARRAYS_FIELD_NUMBER = 17;
    private boolean allowNonasciiArrays_;
    /**
     * <pre>
     * If true, will allow passing non-ascii-printable characters in
     * --input_arrays and --output_arrays. By default (if false), only
     * ascii printable characters are allowed, i.e. character codes
     * ranging from 32 to 127. This is disallowed by default so as to
     * catch common copy-and-paste issues where invisible unicode
     * characters are unwittingly added to these strings.
     * </pre>
     *
     * <code>optional bool allow_nonascii_arrays = 17;</code>
     */
    public boolean hasAllowNonasciiArrays() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * If true, will allow passing non-ascii-printable characters in
     * --input_arrays and --output_arrays. By default (if false), only
     * ascii printable characters are allowed, i.e. character codes
     * ranging from 32 to 127. This is disallowed by default so as to
     * catch common copy-and-paste issues where invisible unicode
     * characters are unwittingly added to these strings.
     * </pre>
     *
     * <code>optional bool allow_nonascii_arrays = 17;</code>
     */
    public boolean getAllowNonasciiArrays() {
      return allowNonasciiArrays_;
    }

    public static final int ARRAYS_EXTRA_INFO_FIELD_NUMBER = 18;
    private toco.ModelFlagsOuterClass.ArraysExtraInfo arraysExtraInfo_;
    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    public boolean hasArraysExtraInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    public toco.ModelFlagsOuterClass.ArraysExtraInfo getArraysExtraInfo() {
      return arraysExtraInfo_ == null ? toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance() : arraysExtraInfo_;
    }
    /**
     * <pre>
     * If set, this ArraysExtraInfo allows to pass extra information about arrays
     * not specified in the input model file, such as extra MinMax information.
     * </pre>
     *
     * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
     */
    public toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder getArraysExtraInfoOrBuilder() {
      return arraysExtraInfo_ == null ? toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance() : arraysExtraInfo_;
    }

    public static final int CHANGE_CONCAT_INPUT_RANGES_FIELD_NUMBER = 19;
    private boolean changeConcatInputRanges_;
    /**
     * <pre>
     * When set to false, toco will not change the input ranges and the output
     * ranges of concat operator to the overlap of all input ranges.
     * </pre>
     *
     * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
     */
    public boolean hasChangeConcatInputRanges() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * When set to false, toco will not change the input ranges and the output
     * ranges of concat operator to the overlap of all input ranges.
     * </pre>
     *
     * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
     */
    public boolean getChangeConcatInputRanges() {
      return changeConcatInputRanges_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < inputArrays_.size(); i++) {
        output.writeMessage(1, inputArrays_.get(i));
      }
      for (int i = 0; i < outputArrays_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, outputArrays_.getRaw(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(10, variableBatch_);
      }
      for (int i = 0; i < rnnStates_.size(); i++) {
        output.writeMessage(12, rnnStates_.get(i));
      }
      for (int i = 0; i < modelChecks_.size(); i++) {
        output.writeMessage(14, modelChecks_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(16, allowNonexistentArrays_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(17, allowNonasciiArrays_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(18, getArraysExtraInfo());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(19, changeConcatInputRanges_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < inputArrays_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, inputArrays_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outputArrays_.size(); i++) {
          dataSize += computeStringSizeNoTag(outputArrays_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOutputArraysList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, variableBatch_);
      }
      for (int i = 0; i < rnnStates_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, rnnStates_.get(i));
      }
      for (int i = 0; i < modelChecks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, modelChecks_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, allowNonexistentArrays_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, allowNonasciiArrays_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getArraysExtraInfo());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, changeConcatInputRanges_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.ModelFlagsOuterClass.ModelFlags)) {
        return super.equals(obj);
      }
      toco.ModelFlagsOuterClass.ModelFlags other = (toco.ModelFlagsOuterClass.ModelFlags) obj;

      boolean result = true;
      result = result && getInputArraysList()
          .equals(other.getInputArraysList());
      result = result && getOutputArraysList()
          .equals(other.getOutputArraysList());
      result = result && (hasVariableBatch() == other.hasVariableBatch());
      if (hasVariableBatch()) {
        result = result && (getVariableBatch()
            == other.getVariableBatch());
      }
      result = result && getRnnStatesList()
          .equals(other.getRnnStatesList());
      result = result && getModelChecksList()
          .equals(other.getModelChecksList());
      result = result && (hasAllowNonexistentArrays() == other.hasAllowNonexistentArrays());
      if (hasAllowNonexistentArrays()) {
        result = result && (getAllowNonexistentArrays()
            == other.getAllowNonexistentArrays());
      }
      result = result && (hasAllowNonasciiArrays() == other.hasAllowNonasciiArrays());
      if (hasAllowNonasciiArrays()) {
        result = result && (getAllowNonasciiArrays()
            == other.getAllowNonasciiArrays());
      }
      result = result && (hasArraysExtraInfo() == other.hasArraysExtraInfo());
      if (hasArraysExtraInfo()) {
        result = result && getArraysExtraInfo()
            .equals(other.getArraysExtraInfo());
      }
      result = result && (hasChangeConcatInputRanges() == other.hasChangeConcatInputRanges());
      if (hasChangeConcatInputRanges()) {
        result = result && (getChangeConcatInputRanges()
            == other.getChangeConcatInputRanges());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getInputArraysCount() > 0) {
        hash = (37 * hash) + INPUT_ARRAYS_FIELD_NUMBER;
        hash = (53 * hash) + getInputArraysList().hashCode();
      }
      if (getOutputArraysCount() > 0) {
        hash = (37 * hash) + OUTPUT_ARRAYS_FIELD_NUMBER;
        hash = (53 * hash) + getOutputArraysList().hashCode();
      }
      if (hasVariableBatch()) {
        hash = (37 * hash) + VARIABLE_BATCH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVariableBatch());
      }
      if (getRnnStatesCount() > 0) {
        hash = (37 * hash) + RNN_STATES_FIELD_NUMBER;
        hash = (53 * hash) + getRnnStatesList().hashCode();
      }
      if (getModelChecksCount() > 0) {
        hash = (37 * hash) + MODEL_CHECKS_FIELD_NUMBER;
        hash = (53 * hash) + getModelChecksList().hashCode();
      }
      if (hasAllowNonexistentArrays()) {
        hash = (37 * hash) + ALLOW_NONEXISTENT_ARRAYS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowNonexistentArrays());
      }
      if (hasAllowNonasciiArrays()) {
        hash = (37 * hash) + ALLOW_NONASCII_ARRAYS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowNonasciiArrays());
      }
      if (hasArraysExtraInfo()) {
        hash = (37 * hash) + ARRAYS_EXTRA_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getArraysExtraInfo().hashCode();
      }
      if (hasChangeConcatInputRanges()) {
        hash = (37 * hash) + CHANGE_CONCAT_INPUT_RANGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChangeConcatInputRanges());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.ModelFlagsOuterClass.ModelFlags parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.ModelFlagsOuterClass.ModelFlags prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ModelFlags encodes properties of a model that, depending on the file
     * format, may or may not be recorded in the model file. The purpose of
     * representing these properties in ModelFlags is to allow passing them
     * separately from the input model file, for instance as command-line
     * parameters, so that we can offer a single uniform interface that can
     * handle files from different input formats.
     * For each of these properties, and each supported file format, we
     * detail in comments below whether the property exists in the given file
     * format.
     * Obsolete flags that have been removed:
     *   optional int32 input_depth = 3;
     *   optional int32 input_width = 4;
     *   optional int32 input_height = 5;
     *   optional int32 batch = 6 [ default = 1];
     *   optional float mean_value = 7;
     *   optional float std_value = 8 [default = 1.];
     *   optional int32 input_dims = 11 [ default = 4];
     *   repeated int32 input_shape = 13;
     * Next ID to USE: 20.
     * </pre>
     *
     * Protobuf type {@code toco.ModelFlags}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.ModelFlags)
        toco.ModelFlagsOuterClass.ModelFlagsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.ModelFlagsOuterClass.ModelFlags.class, toco.ModelFlagsOuterClass.ModelFlags.Builder.class);
      }

      // Construct using toco.ModelFlagsOuterClass.ModelFlags.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInputArraysFieldBuilder();
          getRnnStatesFieldBuilder();
          getModelChecksFieldBuilder();
          getArraysExtraInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (inputArraysBuilder_ == null) {
          inputArrays_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          inputArraysBuilder_.clear();
        }
        outputArrays_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        variableBatch_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (rnnStatesBuilder_ == null) {
          rnnStates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          rnnStatesBuilder_.clear();
        }
        if (modelChecksBuilder_ == null) {
          modelChecks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          modelChecksBuilder_.clear();
        }
        allowNonexistentArrays_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        allowNonasciiArrays_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (arraysExtraInfoBuilder_ == null) {
          arraysExtraInfo_ = null;
        } else {
          arraysExtraInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        changeConcatInputRanges_ = true;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.ModelFlagsOuterClass.internal_static_toco_ModelFlags_descriptor;
      }

      public toco.ModelFlagsOuterClass.ModelFlags getDefaultInstanceForType() {
        return toco.ModelFlagsOuterClass.ModelFlags.getDefaultInstance();
      }

      public toco.ModelFlagsOuterClass.ModelFlags build() {
        toco.ModelFlagsOuterClass.ModelFlags result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.ModelFlagsOuterClass.ModelFlags buildPartial() {
        toco.ModelFlagsOuterClass.ModelFlags result = new toco.ModelFlagsOuterClass.ModelFlags(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (inputArraysBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            inputArrays_ = java.util.Collections.unmodifiableList(inputArrays_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputArrays_ = inputArrays_;
        } else {
          result.inputArrays_ = inputArraysBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          outputArrays_ = outputArrays_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.outputArrays_ = outputArrays_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.variableBatch_ = variableBatch_;
        if (rnnStatesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            rnnStates_ = java.util.Collections.unmodifiableList(rnnStates_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.rnnStates_ = rnnStates_;
        } else {
          result.rnnStates_ = rnnStatesBuilder_.build();
        }
        if (modelChecksBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            modelChecks_ = java.util.Collections.unmodifiableList(modelChecks_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.modelChecks_ = modelChecks_;
        } else {
          result.modelChecks_ = modelChecksBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.allowNonexistentArrays_ = allowNonexistentArrays_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.allowNonasciiArrays_ = allowNonasciiArrays_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        if (arraysExtraInfoBuilder_ == null) {
          result.arraysExtraInfo_ = arraysExtraInfo_;
        } else {
          result.arraysExtraInfo_ = arraysExtraInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.changeConcatInputRanges_ = changeConcatInputRanges_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.ModelFlagsOuterClass.ModelFlags) {
          return mergeFrom((toco.ModelFlagsOuterClass.ModelFlags)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.ModelFlagsOuterClass.ModelFlags other) {
        if (other == toco.ModelFlagsOuterClass.ModelFlags.getDefaultInstance()) return this;
        if (inputArraysBuilder_ == null) {
          if (!other.inputArrays_.isEmpty()) {
            if (inputArrays_.isEmpty()) {
              inputArrays_ = other.inputArrays_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputArraysIsMutable();
              inputArrays_.addAll(other.inputArrays_);
            }
            onChanged();
          }
        } else {
          if (!other.inputArrays_.isEmpty()) {
            if (inputArraysBuilder_.isEmpty()) {
              inputArraysBuilder_.dispose();
              inputArraysBuilder_ = null;
              inputArrays_ = other.inputArrays_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputArraysBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputArraysFieldBuilder() : null;
            } else {
              inputArraysBuilder_.addAllMessages(other.inputArrays_);
            }
          }
        }
        if (!other.outputArrays_.isEmpty()) {
          if (outputArrays_.isEmpty()) {
            outputArrays_ = other.outputArrays_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOutputArraysIsMutable();
            outputArrays_.addAll(other.outputArrays_);
          }
          onChanged();
        }
        if (other.hasVariableBatch()) {
          setVariableBatch(other.getVariableBatch());
        }
        if (rnnStatesBuilder_ == null) {
          if (!other.rnnStates_.isEmpty()) {
            if (rnnStates_.isEmpty()) {
              rnnStates_ = other.rnnStates_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureRnnStatesIsMutable();
              rnnStates_.addAll(other.rnnStates_);
            }
            onChanged();
          }
        } else {
          if (!other.rnnStates_.isEmpty()) {
            if (rnnStatesBuilder_.isEmpty()) {
              rnnStatesBuilder_.dispose();
              rnnStatesBuilder_ = null;
              rnnStates_ = other.rnnStates_;
              bitField0_ = (bitField0_ & ~0x00000008);
              rnnStatesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRnnStatesFieldBuilder() : null;
            } else {
              rnnStatesBuilder_.addAllMessages(other.rnnStates_);
            }
          }
        }
        if (modelChecksBuilder_ == null) {
          if (!other.modelChecks_.isEmpty()) {
            if (modelChecks_.isEmpty()) {
              modelChecks_ = other.modelChecks_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureModelChecksIsMutable();
              modelChecks_.addAll(other.modelChecks_);
            }
            onChanged();
          }
        } else {
          if (!other.modelChecks_.isEmpty()) {
            if (modelChecksBuilder_.isEmpty()) {
              modelChecksBuilder_.dispose();
              modelChecksBuilder_ = null;
              modelChecks_ = other.modelChecks_;
              bitField0_ = (bitField0_ & ~0x00000010);
              modelChecksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getModelChecksFieldBuilder() : null;
            } else {
              modelChecksBuilder_.addAllMessages(other.modelChecks_);
            }
          }
        }
        if (other.hasAllowNonexistentArrays()) {
          setAllowNonexistentArrays(other.getAllowNonexistentArrays());
        }
        if (other.hasAllowNonasciiArrays()) {
          setAllowNonasciiArrays(other.getAllowNonasciiArrays());
        }
        if (other.hasArraysExtraInfo()) {
          mergeArraysExtraInfo(other.getArraysExtraInfo());
        }
        if (other.hasChangeConcatInputRanges()) {
          setChangeConcatInputRanges(other.getChangeConcatInputRanges());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.ModelFlagsOuterClass.ModelFlags parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.ModelFlagsOuterClass.ModelFlags) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<toco.ModelFlagsOuterClass.InputArray> inputArrays_ =
        java.util.Collections.emptyList();
      private void ensureInputArraysIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          inputArrays_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.InputArray>(inputArrays_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.InputArray, toco.ModelFlagsOuterClass.InputArray.Builder, toco.ModelFlagsOuterClass.InputArrayOrBuilder> inputArraysBuilder_;

      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.InputArray> getInputArraysList() {
        if (inputArraysBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputArrays_);
        } else {
          return inputArraysBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public int getInputArraysCount() {
        if (inputArraysBuilder_ == null) {
          return inputArrays_.size();
        } else {
          return inputArraysBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public toco.ModelFlagsOuterClass.InputArray getInputArrays(int index) {
        if (inputArraysBuilder_ == null) {
          return inputArrays_.get(index);
        } else {
          return inputArraysBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder setInputArrays(
          int index, toco.ModelFlagsOuterClass.InputArray value) {
        if (inputArraysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputArraysIsMutable();
          inputArrays_.set(index, value);
          onChanged();
        } else {
          inputArraysBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder setInputArrays(
          int index, toco.ModelFlagsOuterClass.InputArray.Builder builderForValue) {
        if (inputArraysBuilder_ == null) {
          ensureInputArraysIsMutable();
          inputArrays_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputArraysBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder addInputArrays(toco.ModelFlagsOuterClass.InputArray value) {
        if (inputArraysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputArraysIsMutable();
          inputArrays_.add(value);
          onChanged();
        } else {
          inputArraysBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder addInputArrays(
          int index, toco.ModelFlagsOuterClass.InputArray value) {
        if (inputArraysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputArraysIsMutable();
          inputArrays_.add(index, value);
          onChanged();
        } else {
          inputArraysBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder addInputArrays(
          toco.ModelFlagsOuterClass.InputArray.Builder builderForValue) {
        if (inputArraysBuilder_ == null) {
          ensureInputArraysIsMutable();
          inputArrays_.add(builderForValue.build());
          onChanged();
        } else {
          inputArraysBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder addInputArrays(
          int index, toco.ModelFlagsOuterClass.InputArray.Builder builderForValue) {
        if (inputArraysBuilder_ == null) {
          ensureInputArraysIsMutable();
          inputArrays_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputArraysBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder addAllInputArrays(
          java.lang.Iterable<? extends toco.ModelFlagsOuterClass.InputArray> values) {
        if (inputArraysBuilder_ == null) {
          ensureInputArraysIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputArrays_);
          onChanged();
        } else {
          inputArraysBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder clearInputArrays() {
        if (inputArraysBuilder_ == null) {
          inputArrays_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputArraysBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public Builder removeInputArrays(int index) {
        if (inputArraysBuilder_ == null) {
          ensureInputArraysIsMutable();
          inputArrays_.remove(index);
          onChanged();
        } else {
          inputArraysBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public toco.ModelFlagsOuterClass.InputArray.Builder getInputArraysBuilder(
          int index) {
        return getInputArraysFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public toco.ModelFlagsOuterClass.InputArrayOrBuilder getInputArraysOrBuilder(
          int index) {
        if (inputArraysBuilder_ == null) {
          return inputArrays_.get(index);  } else {
          return inputArraysBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public java.util.List<? extends toco.ModelFlagsOuterClass.InputArrayOrBuilder> 
           getInputArraysOrBuilderList() {
        if (inputArraysBuilder_ != null) {
          return inputArraysBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputArrays_);
        }
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public toco.ModelFlagsOuterClass.InputArray.Builder addInputArraysBuilder() {
        return getInputArraysFieldBuilder().addBuilder(
            toco.ModelFlagsOuterClass.InputArray.getDefaultInstance());
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public toco.ModelFlagsOuterClass.InputArray.Builder addInputArraysBuilder(
          int index) {
        return getInputArraysFieldBuilder().addBuilder(
            index, toco.ModelFlagsOuterClass.InputArray.getDefaultInstance());
      }
      /**
       * <pre>
       * Information about the input arrays, i.e. the arrays from which input
       * activations will be read.
       * </pre>
       *
       * <code>repeated .toco.InputArray input_arrays = 1;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.InputArray.Builder> 
           getInputArraysBuilderList() {
        return getInputArraysFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.InputArray, toco.ModelFlagsOuterClass.InputArray.Builder, toco.ModelFlagsOuterClass.InputArrayOrBuilder> 
          getInputArraysFieldBuilder() {
        if (inputArraysBuilder_ == null) {
          inputArraysBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              toco.ModelFlagsOuterClass.InputArray, toco.ModelFlagsOuterClass.InputArray.Builder, toco.ModelFlagsOuterClass.InputArrayOrBuilder>(
                  inputArrays_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          inputArrays_ = null;
        }
        return inputArraysBuilder_;
      }

      private com.google.protobuf.LazyStringList outputArrays_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOutputArraysIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          outputArrays_ = new com.google.protobuf.LazyStringArrayList(outputArrays_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOutputArraysList() {
        return outputArrays_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public int getOutputArraysCount() {
        return outputArrays_.size();
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public java.lang.String getOutputArrays(int index) {
        return outputArrays_.get(index);
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public com.google.protobuf.ByteString
          getOutputArraysBytes(int index) {
        return outputArrays_.getByteString(index);
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public Builder setOutputArrays(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputArraysIsMutable();
        outputArrays_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public Builder addOutputArrays(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputArraysIsMutable();
        outputArrays_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public Builder addAllOutputArrays(
          java.lang.Iterable<java.lang.String> values) {
        ensureOutputArraysIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, outputArrays_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public Builder clearOutputArrays() {
        outputArrays_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the output arrays, i.e. the arrays into which output activations
       * will be written.
       * </pre>
       *
       * <code>repeated string output_arrays = 2;</code>
       */
      public Builder addOutputArraysBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputArraysIsMutable();
        outputArrays_.add(value);
        onChanged();
        return this;
      }

      private boolean variableBatch_ ;
      /**
       * <pre>
       * If true, the model accepts an arbitrary batch size. Mutually exclusive with
       * the 'batch' field: at most one of these two fields can be set.
       * </pre>
       *
       * <code>optional bool variable_batch = 10;</code>
       */
      public boolean hasVariableBatch() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If true, the model accepts an arbitrary batch size. Mutually exclusive with
       * the 'batch' field: at most one of these two fields can be set.
       * </pre>
       *
       * <code>optional bool variable_batch = 10;</code>
       */
      public boolean getVariableBatch() {
        return variableBatch_;
      }
      /**
       * <pre>
       * If true, the model accepts an arbitrary batch size. Mutually exclusive with
       * the 'batch' field: at most one of these two fields can be set.
       * </pre>
       *
       * <code>optional bool variable_batch = 10;</code>
       */
      public Builder setVariableBatch(boolean value) {
        bitField0_ |= 0x00000004;
        variableBatch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, the model accepts an arbitrary batch size. Mutually exclusive with
       * the 'batch' field: at most one of these two fields can be set.
       * </pre>
       *
       * <code>optional bool variable_batch = 10;</code>
       */
      public Builder clearVariableBatch() {
        bitField0_ = (bitField0_ & ~0x00000004);
        variableBatch_ = false;
        onChanged();
        return this;
      }

      private java.util.List<toco.ModelFlagsOuterClass.RnnState> rnnStates_ =
        java.util.Collections.emptyList();
      private void ensureRnnStatesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          rnnStates_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.RnnState>(rnnStates_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.RnnState, toco.ModelFlagsOuterClass.RnnState.Builder, toco.ModelFlagsOuterClass.RnnStateOrBuilder> rnnStatesBuilder_;

      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.RnnState> getRnnStatesList() {
        if (rnnStatesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rnnStates_);
        } else {
          return rnnStatesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public int getRnnStatesCount() {
        if (rnnStatesBuilder_ == null) {
          return rnnStates_.size();
        } else {
          return rnnStatesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public toco.ModelFlagsOuterClass.RnnState getRnnStates(int index) {
        if (rnnStatesBuilder_ == null) {
          return rnnStates_.get(index);
        } else {
          return rnnStatesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder setRnnStates(
          int index, toco.ModelFlagsOuterClass.RnnState value) {
        if (rnnStatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRnnStatesIsMutable();
          rnnStates_.set(index, value);
          onChanged();
        } else {
          rnnStatesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder setRnnStates(
          int index, toco.ModelFlagsOuterClass.RnnState.Builder builderForValue) {
        if (rnnStatesBuilder_ == null) {
          ensureRnnStatesIsMutable();
          rnnStates_.set(index, builderForValue.build());
          onChanged();
        } else {
          rnnStatesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder addRnnStates(toco.ModelFlagsOuterClass.RnnState value) {
        if (rnnStatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRnnStatesIsMutable();
          rnnStates_.add(value);
          onChanged();
        } else {
          rnnStatesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder addRnnStates(
          int index, toco.ModelFlagsOuterClass.RnnState value) {
        if (rnnStatesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRnnStatesIsMutable();
          rnnStates_.add(index, value);
          onChanged();
        } else {
          rnnStatesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder addRnnStates(
          toco.ModelFlagsOuterClass.RnnState.Builder builderForValue) {
        if (rnnStatesBuilder_ == null) {
          ensureRnnStatesIsMutable();
          rnnStates_.add(builderForValue.build());
          onChanged();
        } else {
          rnnStatesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder addRnnStates(
          int index, toco.ModelFlagsOuterClass.RnnState.Builder builderForValue) {
        if (rnnStatesBuilder_ == null) {
          ensureRnnStatesIsMutable();
          rnnStates_.add(index, builderForValue.build());
          onChanged();
        } else {
          rnnStatesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder addAllRnnStates(
          java.lang.Iterable<? extends toco.ModelFlagsOuterClass.RnnState> values) {
        if (rnnStatesBuilder_ == null) {
          ensureRnnStatesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rnnStates_);
          onChanged();
        } else {
          rnnStatesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder clearRnnStates() {
        if (rnnStatesBuilder_ == null) {
          rnnStates_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          rnnStatesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public Builder removeRnnStates(int index) {
        if (rnnStatesBuilder_ == null) {
          ensureRnnStatesIsMutable();
          rnnStates_.remove(index);
          onChanged();
        } else {
          rnnStatesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public toco.ModelFlagsOuterClass.RnnState.Builder getRnnStatesBuilder(
          int index) {
        return getRnnStatesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public toco.ModelFlagsOuterClass.RnnStateOrBuilder getRnnStatesOrBuilder(
          int index) {
        if (rnnStatesBuilder_ == null) {
          return rnnStates_.get(index);  } else {
          return rnnStatesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public java.util.List<? extends toco.ModelFlagsOuterClass.RnnStateOrBuilder> 
           getRnnStatesOrBuilderList() {
        if (rnnStatesBuilder_ != null) {
          return rnnStatesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rnnStates_);
        }
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public toco.ModelFlagsOuterClass.RnnState.Builder addRnnStatesBuilder() {
        return getRnnStatesFieldBuilder().addBuilder(
            toco.ModelFlagsOuterClass.RnnState.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public toco.ModelFlagsOuterClass.RnnState.Builder addRnnStatesBuilder(
          int index) {
        return getRnnStatesFieldBuilder().addBuilder(
            index, toco.ModelFlagsOuterClass.RnnState.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.RnnState rnn_states = 12;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.RnnState.Builder> 
           getRnnStatesBuilderList() {
        return getRnnStatesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.RnnState, toco.ModelFlagsOuterClass.RnnState.Builder, toco.ModelFlagsOuterClass.RnnStateOrBuilder> 
          getRnnStatesFieldBuilder() {
        if (rnnStatesBuilder_ == null) {
          rnnStatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              toco.ModelFlagsOuterClass.RnnState, toco.ModelFlagsOuterClass.RnnState.Builder, toco.ModelFlagsOuterClass.RnnStateOrBuilder>(
                  rnnStates_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          rnnStates_ = null;
        }
        return rnnStatesBuilder_;
      }

      private java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> modelChecks_ =
        java.util.Collections.emptyList();
      private void ensureModelChecksIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          modelChecks_ = new java.util.ArrayList<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck>(modelChecks_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder, toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder> modelChecksBuilder_;

      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> getModelChecksList() {
        if (modelChecksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(modelChecks_);
        } else {
          return modelChecksBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public int getModelChecksCount() {
        if (modelChecksBuilder_ == null) {
          return modelChecks_.size();
        } else {
          return modelChecksBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck getModelChecks(int index) {
        if (modelChecksBuilder_ == null) {
          return modelChecks_.get(index);
        } else {
          return modelChecksBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder setModelChecks(
          int index, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck value) {
        if (modelChecksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModelChecksIsMutable();
          modelChecks_.set(index, value);
          onChanged();
        } else {
          modelChecksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder setModelChecks(
          int index, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder builderForValue) {
        if (modelChecksBuilder_ == null) {
          ensureModelChecksIsMutable();
          modelChecks_.set(index, builderForValue.build());
          onChanged();
        } else {
          modelChecksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder addModelChecks(toco.ModelFlagsOuterClass.ModelFlags.ModelCheck value) {
        if (modelChecksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModelChecksIsMutable();
          modelChecks_.add(value);
          onChanged();
        } else {
          modelChecksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder addModelChecks(
          int index, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck value) {
        if (modelChecksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureModelChecksIsMutable();
          modelChecks_.add(index, value);
          onChanged();
        } else {
          modelChecksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder addModelChecks(
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder builderForValue) {
        if (modelChecksBuilder_ == null) {
          ensureModelChecksIsMutable();
          modelChecks_.add(builderForValue.build());
          onChanged();
        } else {
          modelChecksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder addModelChecks(
          int index, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder builderForValue) {
        if (modelChecksBuilder_ == null) {
          ensureModelChecksIsMutable();
          modelChecks_.add(index, builderForValue.build());
          onChanged();
        } else {
          modelChecksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder addAllModelChecks(
          java.lang.Iterable<? extends toco.ModelFlagsOuterClass.ModelFlags.ModelCheck> values) {
        if (modelChecksBuilder_ == null) {
          ensureModelChecksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, modelChecks_);
          onChanged();
        } else {
          modelChecksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder clearModelChecks() {
        if (modelChecksBuilder_ == null) {
          modelChecks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          modelChecksBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public Builder removeModelChecks(int index) {
        if (modelChecksBuilder_ == null) {
          ensureModelChecksIsMutable();
          modelChecks_.remove(index);
          onChanged();
        } else {
          modelChecksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder getModelChecksBuilder(
          int index) {
        return getModelChecksFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder getModelChecksOrBuilder(
          int index) {
        if (modelChecksBuilder_ == null) {
          return modelChecks_.get(index);  } else {
          return modelChecksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public java.util.List<? extends toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder> 
           getModelChecksOrBuilderList() {
        if (modelChecksBuilder_ != null) {
          return modelChecksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(modelChecks_);
        }
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder addModelChecksBuilder() {
        return getModelChecksFieldBuilder().addBuilder(
            toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder addModelChecksBuilder(
          int index) {
        return getModelChecksFieldBuilder().addBuilder(
            index, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.getDefaultInstance());
      }
      /**
       * <code>repeated .toco.ModelFlags.ModelCheck model_checks = 14;</code>
       */
      public java.util.List<toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder> 
           getModelChecksBuilderList() {
        return getModelChecksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          toco.ModelFlagsOuterClass.ModelFlags.ModelCheck, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder, toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder> 
          getModelChecksFieldBuilder() {
        if (modelChecksBuilder_ == null) {
          modelChecksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              toco.ModelFlagsOuterClass.ModelFlags.ModelCheck, toco.ModelFlagsOuterClass.ModelFlags.ModelCheck.Builder, toco.ModelFlagsOuterClass.ModelFlags.ModelCheckOrBuilder>(
                  modelChecks_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          modelChecks_ = null;
        }
        return modelChecksBuilder_;
      }

      private boolean allowNonexistentArrays_ ;
      /**
       * <pre>
       * If true, will allow passing inexistent arrays in --input_arrays
       * and --output_arrays. This makes little sense, is only useful to
       * more easily get graph visualizations.
       * </pre>
       *
       * <code>optional bool allow_nonexistent_arrays = 16;</code>
       */
      public boolean hasAllowNonexistentArrays() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * If true, will allow passing inexistent arrays in --input_arrays
       * and --output_arrays. This makes little sense, is only useful to
       * more easily get graph visualizations.
       * </pre>
       *
       * <code>optional bool allow_nonexistent_arrays = 16;</code>
       */
      public boolean getAllowNonexistentArrays() {
        return allowNonexistentArrays_;
      }
      /**
       * <pre>
       * If true, will allow passing inexistent arrays in --input_arrays
       * and --output_arrays. This makes little sense, is only useful to
       * more easily get graph visualizations.
       * </pre>
       *
       * <code>optional bool allow_nonexistent_arrays = 16;</code>
       */
      public Builder setAllowNonexistentArrays(boolean value) {
        bitField0_ |= 0x00000020;
        allowNonexistentArrays_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, will allow passing inexistent arrays in --input_arrays
       * and --output_arrays. This makes little sense, is only useful to
       * more easily get graph visualizations.
       * </pre>
       *
       * <code>optional bool allow_nonexistent_arrays = 16;</code>
       */
      public Builder clearAllowNonexistentArrays() {
        bitField0_ = (bitField0_ & ~0x00000020);
        allowNonexistentArrays_ = false;
        onChanged();
        return this;
      }

      private boolean allowNonasciiArrays_ ;
      /**
       * <pre>
       * If true, will allow passing non-ascii-printable characters in
       * --input_arrays and --output_arrays. By default (if false), only
       * ascii printable characters are allowed, i.e. character codes
       * ranging from 32 to 127. This is disallowed by default so as to
       * catch common copy-and-paste issues where invisible unicode
       * characters are unwittingly added to these strings.
       * </pre>
       *
       * <code>optional bool allow_nonascii_arrays = 17;</code>
       */
      public boolean hasAllowNonasciiArrays() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * If true, will allow passing non-ascii-printable characters in
       * --input_arrays and --output_arrays. By default (if false), only
       * ascii printable characters are allowed, i.e. character codes
       * ranging from 32 to 127. This is disallowed by default so as to
       * catch common copy-and-paste issues where invisible unicode
       * characters are unwittingly added to these strings.
       * </pre>
       *
       * <code>optional bool allow_nonascii_arrays = 17;</code>
       */
      public boolean getAllowNonasciiArrays() {
        return allowNonasciiArrays_;
      }
      /**
       * <pre>
       * If true, will allow passing non-ascii-printable characters in
       * --input_arrays and --output_arrays. By default (if false), only
       * ascii printable characters are allowed, i.e. character codes
       * ranging from 32 to 127. This is disallowed by default so as to
       * catch common copy-and-paste issues where invisible unicode
       * characters are unwittingly added to these strings.
       * </pre>
       *
       * <code>optional bool allow_nonascii_arrays = 17;</code>
       */
      public Builder setAllowNonasciiArrays(boolean value) {
        bitField0_ |= 0x00000040;
        allowNonasciiArrays_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, will allow passing non-ascii-printable characters in
       * --input_arrays and --output_arrays. By default (if false), only
       * ascii printable characters are allowed, i.e. character codes
       * ranging from 32 to 127. This is disallowed by default so as to
       * catch common copy-and-paste issues where invisible unicode
       * characters are unwittingly added to these strings.
       * </pre>
       *
       * <code>optional bool allow_nonascii_arrays = 17;</code>
       */
      public Builder clearAllowNonasciiArrays() {
        bitField0_ = (bitField0_ & ~0x00000040);
        allowNonasciiArrays_ = false;
        onChanged();
        return this;
      }

      private toco.ModelFlagsOuterClass.ArraysExtraInfo arraysExtraInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          toco.ModelFlagsOuterClass.ArraysExtraInfo, toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder> arraysExtraInfoBuilder_;
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public boolean hasArraysExtraInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo getArraysExtraInfo() {
        if (arraysExtraInfoBuilder_ == null) {
          return arraysExtraInfo_ == null ? toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance() : arraysExtraInfo_;
        } else {
          return arraysExtraInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public Builder setArraysExtraInfo(toco.ModelFlagsOuterClass.ArraysExtraInfo value) {
        if (arraysExtraInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          arraysExtraInfo_ = value;
          onChanged();
        } else {
          arraysExtraInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public Builder setArraysExtraInfo(
          toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder builderForValue) {
        if (arraysExtraInfoBuilder_ == null) {
          arraysExtraInfo_ = builderForValue.build();
          onChanged();
        } else {
          arraysExtraInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public Builder mergeArraysExtraInfo(toco.ModelFlagsOuterClass.ArraysExtraInfo value) {
        if (arraysExtraInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              arraysExtraInfo_ != null &&
              arraysExtraInfo_ != toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance()) {
            arraysExtraInfo_ =
              toco.ModelFlagsOuterClass.ArraysExtraInfo.newBuilder(arraysExtraInfo_).mergeFrom(value).buildPartial();
          } else {
            arraysExtraInfo_ = value;
          }
          onChanged();
        } else {
          arraysExtraInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public Builder clearArraysExtraInfo() {
        if (arraysExtraInfoBuilder_ == null) {
          arraysExtraInfo_ = null;
          onChanged();
        } else {
          arraysExtraInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder getArraysExtraInfoBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getArraysExtraInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      public toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder getArraysExtraInfoOrBuilder() {
        if (arraysExtraInfoBuilder_ != null) {
          return arraysExtraInfoBuilder_.getMessageOrBuilder();
        } else {
          return arraysExtraInfo_ == null ?
              toco.ModelFlagsOuterClass.ArraysExtraInfo.getDefaultInstance() : arraysExtraInfo_;
        }
      }
      /**
       * <pre>
       * If set, this ArraysExtraInfo allows to pass extra information about arrays
       * not specified in the input model file, such as extra MinMax information.
       * </pre>
       *
       * <code>optional .toco.ArraysExtraInfo arrays_extra_info = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          toco.ModelFlagsOuterClass.ArraysExtraInfo, toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder> 
          getArraysExtraInfoFieldBuilder() {
        if (arraysExtraInfoBuilder_ == null) {
          arraysExtraInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              toco.ModelFlagsOuterClass.ArraysExtraInfo, toco.ModelFlagsOuterClass.ArraysExtraInfo.Builder, toco.ModelFlagsOuterClass.ArraysExtraInfoOrBuilder>(
                  getArraysExtraInfo(),
                  getParentForChildren(),
                  isClean());
          arraysExtraInfo_ = null;
        }
        return arraysExtraInfoBuilder_;
      }

      private boolean changeConcatInputRanges_ = true;
      /**
       * <pre>
       * When set to false, toco will not change the input ranges and the output
       * ranges of concat operator to the overlap of all input ranges.
       * </pre>
       *
       * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
       */
      public boolean hasChangeConcatInputRanges() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * When set to false, toco will not change the input ranges and the output
       * ranges of concat operator to the overlap of all input ranges.
       * </pre>
       *
       * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
       */
      public boolean getChangeConcatInputRanges() {
        return changeConcatInputRanges_;
      }
      /**
       * <pre>
       * When set to false, toco will not change the input ranges and the output
       * ranges of concat operator to the overlap of all input ranges.
       * </pre>
       *
       * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
       */
      public Builder setChangeConcatInputRanges(boolean value) {
        bitField0_ |= 0x00000100;
        changeConcatInputRanges_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When set to false, toco will not change the input ranges and the output
       * ranges of concat operator to the overlap of all input ranges.
       * </pre>
       *
       * <code>optional bool change_concat_input_ranges = 19 [default = true];</code>
       */
      public Builder clearChangeConcatInputRanges() {
        bitField0_ = (bitField0_ & ~0x00000100);
        changeConcatInputRanges_ = true;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.ModelFlags)
    }

    // @@protoc_insertion_point(class_scope:toco.ModelFlags)
    private static final toco.ModelFlagsOuterClass.ModelFlags DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.ModelFlagsOuterClass.ModelFlags();
    }

    public static toco.ModelFlagsOuterClass.ModelFlags getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ModelFlags>
        PARSER = new com.google.protobuf.AbstractParser<ModelFlags>() {
      public ModelFlags parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ModelFlags(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ModelFlags> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ModelFlags> getParserForType() {
      return PARSER;
    }

    public toco.ModelFlagsOuterClass.ModelFlags getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_InputArrayShape_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_InputArrayShape_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_InputArray_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_InputArray_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_RnnState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_RnnState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_ArraysExtraInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_ArraysExtraInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_ArraysExtraInfo_Entry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_ArraysExtraInfo_Entry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_ModelFlags_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_ModelFlags_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_ModelFlags_ModelCheck_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_ModelFlags_ModelCheck_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.tensorflow/contrib/lite/toco/model_fla" +
      "gs.proto\022\004toco\032(tensorflow/contrib/lite/" +
      "toco/types.proto\"\037\n\017InputArrayShape\022\014\n\004d" +
      "ims\030\002 \003(\005\"\217\001\n\nInputArray\022\014\n\004name\030\001 \001(\t\022$" +
      "\n\005shape\030\006 \001(\0132\025.toco.InputArrayShape\022\022\n\n" +
      "mean_value\030\003 \001(\002\022\024\n\tstd_value\030\004 \001(\002:\0011\022#" +
      "\n\tdata_type\030\005 \001(\0162\020.toco.IODataType\"b\n\010R" +
      "nnState\022\023\n\013state_array\030\001 \001(\t\022\036\n\026back_edg" +
      "e_source_array\030\002 \001(\t\022\023\n\013discardable\030\005 \001(" +
      "\010\022\014\n\004size\030\003 \001(\005\"\332\001\n\017ArraysExtraInfo\022,\n\007e",
      "ntries\030\001 \003(\0132\033.toco.ArraysExtraInfo.Entr" +
      "y\032\230\001\n\005Entry\022\014\n\004name\030\001 \001(\t\022\013\n\003min\030\002 \001(\001\022\013" +
      "\n\003max\030\003 \001(\001\022#\n\tdata_type\030\004 \001(\0162\020.toco.IO" +
      "DataType\022$\n\005shape\030\005 \001(\0132\025.toco.InputArra" +
      "yShape\022\034\n\024constant_float_value\030\006 \001(\002\"\255\003\n" +
      "\nModelFlags\022&\n\014input_arrays\030\001 \003(\0132\020.toco" +
      ".InputArray\022\025\n\routput_arrays\030\002 \003(\t\022\026\n\016va" +
      "riable_batch\030\n \001(\010\022\"\n\nrnn_states\030\014 \003(\0132\016" +
      ".toco.RnnState\0221\n\014model_checks\030\016 \003(\0132\033.t" +
      "oco.ModelFlags.ModelCheck\022 \n\030allow_nonex",
      "istent_arrays\030\020 \001(\010\022\035\n\025allow_nonascii_ar" +
      "rays\030\021 \001(\010\0220\n\021arrays_extra_info\030\022 \001(\0132\025." +
      "toco.ArraysExtraInfo\022(\n\032change_concat_in" +
      "put_ranges\030\023 \001(\010:\004true\032T\n\nModelCheck\022\030\n\n" +
      "count_type\030\001 \001(\t:\004None\022\025\n\tcount_min\030\002 \001(" +
      "\005:\002-1\022\025\n\tcount_max\030\003 \001(\005:\002-1"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          toco.Types.getDescriptor(),
        }, assigner);
    internal_static_toco_InputArrayShape_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_toco_InputArrayShape_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_InputArrayShape_descriptor,
        new java.lang.String[] { "Dims", });
    internal_static_toco_InputArray_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_toco_InputArray_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_InputArray_descriptor,
        new java.lang.String[] { "Name", "Shape", "MeanValue", "StdValue", "DataType", });
    internal_static_toco_RnnState_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_toco_RnnState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_RnnState_descriptor,
        new java.lang.String[] { "StateArray", "BackEdgeSourceArray", "Discardable", "Size", });
    internal_static_toco_ArraysExtraInfo_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_toco_ArraysExtraInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_ArraysExtraInfo_descriptor,
        new java.lang.String[] { "Entries", });
    internal_static_toco_ArraysExtraInfo_Entry_descriptor =
      internal_static_toco_ArraysExtraInfo_descriptor.getNestedTypes().get(0);
    internal_static_toco_ArraysExtraInfo_Entry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_ArraysExtraInfo_Entry_descriptor,
        new java.lang.String[] { "Name", "Min", "Max", "DataType", "Shape", "ConstantFloatValue", });
    internal_static_toco_ModelFlags_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_toco_ModelFlags_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_ModelFlags_descriptor,
        new java.lang.String[] { "InputArrays", "OutputArrays", "VariableBatch", "RnnStates", "ModelChecks", "AllowNonexistentArrays", "AllowNonasciiArrays", "ArraysExtraInfo", "ChangeConcatInputRanges", });
    internal_static_toco_ModelFlags_ModelCheck_descriptor =
      internal_static_toco_ModelFlags_descriptor.getNestedTypes().get(0);
    internal_static_toco_ModelFlags_ModelCheck_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_ModelFlags_ModelCheck_descriptor,
        new java.lang.String[] { "CountType", "CountMin", "CountMax", });
    toco.Types.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
