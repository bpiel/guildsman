// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/lite/toco/toco_flags.proto

package toco;

public final class TocoFlagsOuterClass {
  private TocoFlagsOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Supported I/O file formats. Some formats may be input-only or output-only.
   * </pre>
   *
   * Protobuf enum {@code toco.FileFormat}
   */
  public enum FileFormat
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FILE_FORMAT_UNKNOWN = 0;</code>
     */
    FILE_FORMAT_UNKNOWN(0),
    /**
     * <pre>
     * GraphDef, third_party/tensorflow/core/framework/graph.proto
     * </pre>
     *
     * <code>TENSORFLOW_GRAPHDEF = 1;</code>
     */
    TENSORFLOW_GRAPHDEF(1),
    /**
     * <pre>
     * Tensorflow's mobile inference model.
     * third_party/tensorflow/contrib/tflite/schema.fbs
     * </pre>
     *
     * <code>TFLITE = 2;</code>
     */
    TFLITE(2),
    /**
     * <pre>
     * GraphViz
     * Export-only.
     * </pre>
     *
     * <code>GRAPHVIZ_DOT = 3;</code>
     */
    GRAPHVIZ_DOT(3),
    ;

    /**
     * <code>FILE_FORMAT_UNKNOWN = 0;</code>
     */
    public static final int FILE_FORMAT_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * GraphDef, third_party/tensorflow/core/framework/graph.proto
     * </pre>
     *
     * <code>TENSORFLOW_GRAPHDEF = 1;</code>
     */
    public static final int TENSORFLOW_GRAPHDEF_VALUE = 1;
    /**
     * <pre>
     * Tensorflow's mobile inference model.
     * third_party/tensorflow/contrib/tflite/schema.fbs
     * </pre>
     *
     * <code>TFLITE = 2;</code>
     */
    public static final int TFLITE_VALUE = 2;
    /**
     * <pre>
     * GraphViz
     * Export-only.
     * </pre>
     *
     * <code>GRAPHVIZ_DOT = 3;</code>
     */
    public static final int GRAPHVIZ_DOT_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FileFormat valueOf(int value) {
      return forNumber(value);
    }

    public static FileFormat forNumber(int value) {
      switch (value) {
        case 0: return FILE_FORMAT_UNKNOWN;
        case 1: return TENSORFLOW_GRAPHDEF;
        case 2: return TFLITE;
        case 3: return GRAPHVIZ_DOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FileFormat>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FileFormat> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FileFormat>() {
            public FileFormat findValueByNumber(int number) {
              return FileFormat.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return toco.TocoFlagsOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final FileFormat[] VALUES = values();

    public static FileFormat valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FileFormat(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:toco.FileFormat)
  }

  public interface TocoFlagsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:toco.TocoFlags)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Input file format
     * </pre>
     *
     * <code>optional .toco.FileFormat input_format = 1;</code>
     */
    boolean hasInputFormat();
    /**
     * <pre>
     * Input file format
     * </pre>
     *
     * <code>optional .toco.FileFormat input_format = 1;</code>
     */
    toco.TocoFlagsOuterClass.FileFormat getInputFormat();

    /**
     * <pre>
     * Output file format
     * </pre>
     *
     * <code>optional .toco.FileFormat output_format = 2;</code>
     */
    boolean hasOutputFormat();
    /**
     * <pre>
     * Output file format
     * </pre>
     *
     * <code>optional .toco.FileFormat output_format = 2;</code>
     */
    toco.TocoFlagsOuterClass.FileFormat getOutputFormat();

    /**
     * <pre>
     * Similar to inference_type, but allows to control specifically the
     * quantization of input arrays, separately from other arrays.
     * If not set, then the value of inference_type is implicitly used, i.e.
     * by default input arrays are quantized like other arrays.
     * Like inference_type, this only affects real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * The typical use for this flag is for vision models taking a bitmap
     * as input, typically with uint8 channels, yet still requiring floating-point
     * inference. For such image models, the uint8 input is quantized, i.e.
     * the uint8 values are interpreted as real numbers, and the quantization
     * parameters used for such input arrays are their mean_value, std_value
     * parameters.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_input_type = 11;</code>
     */
    boolean hasInferenceInputType();
    /**
     * <pre>
     * Similar to inference_type, but allows to control specifically the
     * quantization of input arrays, separately from other arrays.
     * If not set, then the value of inference_type is implicitly used, i.e.
     * by default input arrays are quantized like other arrays.
     * Like inference_type, this only affects real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * The typical use for this flag is for vision models taking a bitmap
     * as input, typically with uint8 channels, yet still requiring floating-point
     * inference. For such image models, the uint8 input is quantized, i.e.
     * the uint8 values are interpreted as real numbers, and the quantization
     * parameters used for such input arrays are their mean_value, std_value
     * parameters.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_input_type = 11;</code>
     */
    toco.Types.IODataType getInferenceInputType();

    /**
     * <pre>
     * Sets the type of real-number arrays in the output file, that is, controls
     * the representation (quantization) of real numbers in the output file,
     * except for input arrays, which are controlled by inference_input_type.
     * NOTE: this flag only impacts real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * For real-number arrays, the impact of this flag is to allow the output
     * file to choose a different real-numbers representation (quantization)
     * from what the input file used. For any other types of arrays, changing
     * the data type would not make sense.
     * Specifically:
     *    - If FLOAT, then real-numbers arrays will be of type float in
     *      the output file. If they were quantized in the input file, then
     *      they get dequantized.
     *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
     *      as uint8 in the output file. If they were float in the input file,
     *      then they get quantized.
     *    - If not set, then all real-numbers arrays retain the same type in the
     *      output file as they have in the input file.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_type = 4;</code>
     */
    boolean hasInferenceType();
    /**
     * <pre>
     * Sets the type of real-number arrays in the output file, that is, controls
     * the representation (quantization) of real numbers in the output file,
     * except for input arrays, which are controlled by inference_input_type.
     * NOTE: this flag only impacts real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * For real-number arrays, the impact of this flag is to allow the output
     * file to choose a different real-numbers representation (quantization)
     * from what the input file used. For any other types of arrays, changing
     * the data type would not make sense.
     * Specifically:
     *    - If FLOAT, then real-numbers arrays will be of type float in
     *      the output file. If they were quantized in the input file, then
     *      they get dequantized.
     *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
     *      as uint8 in the output file. If they were float in the input file,
     *      then they get quantized.
     *    - If not set, then all real-numbers arrays retain the same type in the
     *      output file as they have in the input file.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_type = 4;</code>
     */
    toco.Types.IODataType getInferenceType();

    /**
     * <pre>
     * default_ranges_min and default_ranges_max are helpers to experiment
     * with quantization of models. Normally, quantization requires the input
     * model to have (min, max) range information for every activations array.
     * This is needed in order to know how to quantize arrays and still achieve
     * satisfactory accuracy. However, in some circumstances one would just like
     * to estimate the performance of quantized inference, without caring about
     * accuracy. That is what default_ranges_min and default_ranges_max are for:
     * when specified, they will be used as default (min, max) range boundaries
     * for all activation arrays that lack (min, max) range information, thus
     * allowing for quantization to proceed.
     * It should be clear from the above explanation that these parameters are
     * for experimentation purposes only and should not be used in production:
     * they make it easy to quantize models, but the resulting quantized model
     * will be inaccurate.
     * </pre>
     *
     * <code>optional float default_ranges_min = 5;</code>
     */
    boolean hasDefaultRangesMin();
    /**
     * <pre>
     * default_ranges_min and default_ranges_max are helpers to experiment
     * with quantization of models. Normally, quantization requires the input
     * model to have (min, max) range information for every activations array.
     * This is needed in order to know how to quantize arrays and still achieve
     * satisfactory accuracy. However, in some circumstances one would just like
     * to estimate the performance of quantized inference, without caring about
     * accuracy. That is what default_ranges_min and default_ranges_max are for:
     * when specified, they will be used as default (min, max) range boundaries
     * for all activation arrays that lack (min, max) range information, thus
     * allowing for quantization to proceed.
     * It should be clear from the above explanation that these parameters are
     * for experimentation purposes only and should not be used in production:
     * they make it easy to quantize models, but the resulting quantized model
     * will be inaccurate.
     * </pre>
     *
     * <code>optional float default_ranges_min = 5;</code>
     */
    float getDefaultRangesMin();

    /**
     * <code>optional float default_ranges_max = 6;</code>
     */
    boolean hasDefaultRangesMax();
    /**
     * <code>optional float default_ranges_max = 6;</code>
     */
    float getDefaultRangesMax();

    /**
     * <pre>
     * Ignore and discard FakeQuant nodes. For instance, that can be used to
     * generate plain float code without fake-quantization from a quantized
     * graph.
     * </pre>
     *
     * <code>optional bool drop_fake_quant = 7;</code>
     */
    boolean hasDropFakeQuant();
    /**
     * <pre>
     * Ignore and discard FakeQuant nodes. For instance, that can be used to
     * generate plain float code without fake-quantization from a quantized
     * graph.
     * </pre>
     *
     * <code>optional bool drop_fake_quant = 7;</code>
     */
    boolean getDropFakeQuant();

    /**
     * <pre>
     * Normally, FakeQuant nodes must be strict boundaries for graph
     * transformations, in order to ensure that quantized inference has the
     * exact same arithmetic behavior as quantized training --- which is the
     * whole point of quantized training and of FakeQuant nodes in the first
     * place. However, that entails subtle requirements on where exactly
     * FakeQuant nodes must be placed in the graph. Some quantized graphs
     * have FakeQuant nodes at unexpected locations, that prevent graph
     * transformations that are necessary in order to generate inference
     * code for these graphs. Such graphs should be fixed, but as a
     * temporary work-around, setting this reorder_across_fake_quant flag
     * allows toco to perform necessary graph transformaitons on them,
     * at the cost of no longer faithfully matching inference and training
     * arithmetic.
     * </pre>
     *
     * <code>optional bool reorder_across_fake_quant = 8;</code>
     */
    boolean hasReorderAcrossFakeQuant();
    /**
     * <pre>
     * Normally, FakeQuant nodes must be strict boundaries for graph
     * transformations, in order to ensure that quantized inference has the
     * exact same arithmetic behavior as quantized training --- which is the
     * whole point of quantized training and of FakeQuant nodes in the first
     * place. However, that entails subtle requirements on where exactly
     * FakeQuant nodes must be placed in the graph. Some quantized graphs
     * have FakeQuant nodes at unexpected locations, that prevent graph
     * transformations that are necessary in order to generate inference
     * code for these graphs. Such graphs should be fixed, but as a
     * temporary work-around, setting this reorder_across_fake_quant flag
     * allows toco to perform necessary graph transformaitons on them,
     * at the cost of no longer faithfully matching inference and training
     * arithmetic.
     * </pre>
     *
     * <code>optional bool reorder_across_fake_quant = 8;</code>
     */
    boolean getReorderAcrossFakeQuant();

    /**
     * <pre>
     * If true, allow TOCO to create TF Lite Custom operators for all the
     * unsupported Tensorflow ops.
     * </pre>
     *
     * <code>optional bool allow_custom_ops = 10;</code>
     */
    boolean hasAllowCustomOps();
    /**
     * <pre>
     * If true, allow TOCO to create TF Lite Custom operators for all the
     * unsupported Tensorflow ops.
     * </pre>
     *
     * <code>optional bool allow_custom_ops = 10;</code>
     */
    boolean getAllowCustomOps();

    /**
     * <pre>
     * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
     * If true, then control dependencies will be immediately dropped during
     * import.
     * If not set, the default behavior is as follows:
     *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
     *    - Default to true in all other cases.
     * </pre>
     *
     * <code>optional bool drop_control_dependency = 12;</code>
     */
    boolean hasDropControlDependency();
    /**
     * <pre>
     * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
     * If true, then control dependencies will be immediately dropped during
     * import.
     * If not set, the default behavior is as follows:
     *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
     *    - Default to true in all other cases.
     * </pre>
     *
     * <code>optional bool drop_control_dependency = 12;</code>
     */
    boolean getDropControlDependency();

    /**
     * <pre>
     * Disables transformations that fuse subgraphs such as known LSTMs (not all
     * LSTMs are identified).
     * </pre>
     *
     * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
     */
    boolean hasDebugDisableRecurrentCellFusion();
    /**
     * <pre>
     * Disables transformations that fuse subgraphs such as known LSTMs (not all
     * LSTMs are identified).
     * </pre>
     *
     * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
     */
    boolean getDebugDisableRecurrentCellFusion();
  }
  /**
   * <pre>
   * TocoFlags encodes extra parameters that drive tooling operations, that
   * are not normally encoded in model files and in general may not be thought
   * of as properties of models, instead describing how models are to be
   * processed in the context of the present tooling job.
   * Next ID to use: 14.
   * </pre>
   *
   * Protobuf type {@code toco.TocoFlags}
   */
  public  static final class TocoFlags extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:toco.TocoFlags)
      TocoFlagsOrBuilder {
    // Use TocoFlags.newBuilder() to construct.
    private TocoFlags(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TocoFlags() {
      inputFormat_ = 0;
      outputFormat_ = 0;
      inferenceInputType_ = 0;
      inferenceType_ = 0;
      defaultRangesMin_ = 0F;
      defaultRangesMax_ = 0F;
      dropFakeQuant_ = false;
      reorderAcrossFakeQuant_ = false;
      allowCustomOps_ = false;
      dropControlDependency_ = false;
      debugDisableRecurrentCellFusion_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TocoFlags(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              toco.TocoFlagsOuterClass.FileFormat value = toco.TocoFlagsOuterClass.FileFormat.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                inputFormat_ = rawValue;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              toco.TocoFlagsOuterClass.FileFormat value = toco.TocoFlagsOuterClass.FileFormat.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                outputFormat_ = rawValue;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              toco.Types.IODataType value = toco.Types.IODataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                inferenceType_ = rawValue;
              }
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              defaultRangesMin_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              defaultRangesMax_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              dropFakeQuant_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              reorderAcrossFakeQuant_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              allowCustomOps_ = input.readBool();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              toco.Types.IODataType value = toco.Types.IODataType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                inferenceInputType_ = rawValue;
              }
              break;
            }
            case 96: {
              bitField0_ |= 0x00000200;
              dropControlDependency_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000400;
              debugDisableRecurrentCellFusion_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return toco.TocoFlagsOuterClass.internal_static_toco_TocoFlags_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return toco.TocoFlagsOuterClass.internal_static_toco_TocoFlags_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              toco.TocoFlagsOuterClass.TocoFlags.class, toco.TocoFlagsOuterClass.TocoFlags.Builder.class);
    }

    private int bitField0_;
    public static final int INPUT_FORMAT_FIELD_NUMBER = 1;
    private int inputFormat_;
    /**
     * <pre>
     * Input file format
     * </pre>
     *
     * <code>optional .toco.FileFormat input_format = 1;</code>
     */
    public boolean hasInputFormat() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Input file format
     * </pre>
     *
     * <code>optional .toco.FileFormat input_format = 1;</code>
     */
    public toco.TocoFlagsOuterClass.FileFormat getInputFormat() {
      toco.TocoFlagsOuterClass.FileFormat result = toco.TocoFlagsOuterClass.FileFormat.valueOf(inputFormat_);
      return result == null ? toco.TocoFlagsOuterClass.FileFormat.FILE_FORMAT_UNKNOWN : result;
    }

    public static final int OUTPUT_FORMAT_FIELD_NUMBER = 2;
    private int outputFormat_;
    /**
     * <pre>
     * Output file format
     * </pre>
     *
     * <code>optional .toco.FileFormat output_format = 2;</code>
     */
    public boolean hasOutputFormat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Output file format
     * </pre>
     *
     * <code>optional .toco.FileFormat output_format = 2;</code>
     */
    public toco.TocoFlagsOuterClass.FileFormat getOutputFormat() {
      toco.TocoFlagsOuterClass.FileFormat result = toco.TocoFlagsOuterClass.FileFormat.valueOf(outputFormat_);
      return result == null ? toco.TocoFlagsOuterClass.FileFormat.FILE_FORMAT_UNKNOWN : result;
    }

    public static final int INFERENCE_INPUT_TYPE_FIELD_NUMBER = 11;
    private int inferenceInputType_;
    /**
     * <pre>
     * Similar to inference_type, but allows to control specifically the
     * quantization of input arrays, separately from other arrays.
     * If not set, then the value of inference_type is implicitly used, i.e.
     * by default input arrays are quantized like other arrays.
     * Like inference_type, this only affects real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * The typical use for this flag is for vision models taking a bitmap
     * as input, typically with uint8 channels, yet still requiring floating-point
     * inference. For such image models, the uint8 input is quantized, i.e.
     * the uint8 values are interpreted as real numbers, and the quantization
     * parameters used for such input arrays are their mean_value, std_value
     * parameters.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_input_type = 11;</code>
     */
    public boolean hasInferenceInputType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Similar to inference_type, but allows to control specifically the
     * quantization of input arrays, separately from other arrays.
     * If not set, then the value of inference_type is implicitly used, i.e.
     * by default input arrays are quantized like other arrays.
     * Like inference_type, this only affects real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * The typical use for this flag is for vision models taking a bitmap
     * as input, typically with uint8 channels, yet still requiring floating-point
     * inference. For such image models, the uint8 input is quantized, i.e.
     * the uint8 values are interpreted as real numbers, and the quantization
     * parameters used for such input arrays are their mean_value, std_value
     * parameters.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_input_type = 11;</code>
     */
    public toco.Types.IODataType getInferenceInputType() {
      toco.Types.IODataType result = toco.Types.IODataType.valueOf(inferenceInputType_);
      return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
    }

    public static final int INFERENCE_TYPE_FIELD_NUMBER = 4;
    private int inferenceType_;
    /**
     * <pre>
     * Sets the type of real-number arrays in the output file, that is, controls
     * the representation (quantization) of real numbers in the output file,
     * except for input arrays, which are controlled by inference_input_type.
     * NOTE: this flag only impacts real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * For real-number arrays, the impact of this flag is to allow the output
     * file to choose a different real-numbers representation (quantization)
     * from what the input file used. For any other types of arrays, changing
     * the data type would not make sense.
     * Specifically:
     *    - If FLOAT, then real-numbers arrays will be of type float in
     *      the output file. If they were quantized in the input file, then
     *      they get dequantized.
     *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
     *      as uint8 in the output file. If they were float in the input file,
     *      then they get quantized.
     *    - If not set, then all real-numbers arrays retain the same type in the
     *      output file as they have in the input file.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_type = 4;</code>
     */
    public boolean hasInferenceType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Sets the type of real-number arrays in the output file, that is, controls
     * the representation (quantization) of real numbers in the output file,
     * except for input arrays, which are controlled by inference_input_type.
     * NOTE: this flag only impacts real-number arrays. By "real-number"
     * we mean float arrays, and quantized arrays. This excludes plain
     * integer arrays, strings arrays, and every other data type.
     * For real-number arrays, the impact of this flag is to allow the output
     * file to choose a different real-numbers representation (quantization)
     * from what the input file used. For any other types of arrays, changing
     * the data type would not make sense.
     * Specifically:
     *    - If FLOAT, then real-numbers arrays will be of type float in
     *      the output file. If they were quantized in the input file, then
     *      they get dequantized.
     *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
     *      as uint8 in the output file. If they were float in the input file,
     *      then they get quantized.
     *    - If not set, then all real-numbers arrays retain the same type in the
     *      output file as they have in the input file.
     * </pre>
     *
     * <code>optional .toco.IODataType inference_type = 4;</code>
     */
    public toco.Types.IODataType getInferenceType() {
      toco.Types.IODataType result = toco.Types.IODataType.valueOf(inferenceType_);
      return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
    }

    public static final int DEFAULT_RANGES_MIN_FIELD_NUMBER = 5;
    private float defaultRangesMin_;
    /**
     * <pre>
     * default_ranges_min and default_ranges_max are helpers to experiment
     * with quantization of models. Normally, quantization requires the input
     * model to have (min, max) range information for every activations array.
     * This is needed in order to know how to quantize arrays and still achieve
     * satisfactory accuracy. However, in some circumstances one would just like
     * to estimate the performance of quantized inference, without caring about
     * accuracy. That is what default_ranges_min and default_ranges_max are for:
     * when specified, they will be used as default (min, max) range boundaries
     * for all activation arrays that lack (min, max) range information, thus
     * allowing for quantization to proceed.
     * It should be clear from the above explanation that these parameters are
     * for experimentation purposes only and should not be used in production:
     * they make it easy to quantize models, but the resulting quantized model
     * will be inaccurate.
     * </pre>
     *
     * <code>optional float default_ranges_min = 5;</code>
     */
    public boolean hasDefaultRangesMin() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * default_ranges_min and default_ranges_max are helpers to experiment
     * with quantization of models. Normally, quantization requires the input
     * model to have (min, max) range information for every activations array.
     * This is needed in order to know how to quantize arrays and still achieve
     * satisfactory accuracy. However, in some circumstances one would just like
     * to estimate the performance of quantized inference, without caring about
     * accuracy. That is what default_ranges_min and default_ranges_max are for:
     * when specified, they will be used as default (min, max) range boundaries
     * for all activation arrays that lack (min, max) range information, thus
     * allowing for quantization to proceed.
     * It should be clear from the above explanation that these parameters are
     * for experimentation purposes only and should not be used in production:
     * they make it easy to quantize models, but the resulting quantized model
     * will be inaccurate.
     * </pre>
     *
     * <code>optional float default_ranges_min = 5;</code>
     */
    public float getDefaultRangesMin() {
      return defaultRangesMin_;
    }

    public static final int DEFAULT_RANGES_MAX_FIELD_NUMBER = 6;
    private float defaultRangesMax_;
    /**
     * <code>optional float default_ranges_max = 6;</code>
     */
    public boolean hasDefaultRangesMax() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float default_ranges_max = 6;</code>
     */
    public float getDefaultRangesMax() {
      return defaultRangesMax_;
    }

    public static final int DROP_FAKE_QUANT_FIELD_NUMBER = 7;
    private boolean dropFakeQuant_;
    /**
     * <pre>
     * Ignore and discard FakeQuant nodes. For instance, that can be used to
     * generate plain float code without fake-quantization from a quantized
     * graph.
     * </pre>
     *
     * <code>optional bool drop_fake_quant = 7;</code>
     */
    public boolean hasDropFakeQuant() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Ignore and discard FakeQuant nodes. For instance, that can be used to
     * generate plain float code without fake-quantization from a quantized
     * graph.
     * </pre>
     *
     * <code>optional bool drop_fake_quant = 7;</code>
     */
    public boolean getDropFakeQuant() {
      return dropFakeQuant_;
    }

    public static final int REORDER_ACROSS_FAKE_QUANT_FIELD_NUMBER = 8;
    private boolean reorderAcrossFakeQuant_;
    /**
     * <pre>
     * Normally, FakeQuant nodes must be strict boundaries for graph
     * transformations, in order to ensure that quantized inference has the
     * exact same arithmetic behavior as quantized training --- which is the
     * whole point of quantized training and of FakeQuant nodes in the first
     * place. However, that entails subtle requirements on where exactly
     * FakeQuant nodes must be placed in the graph. Some quantized graphs
     * have FakeQuant nodes at unexpected locations, that prevent graph
     * transformations that are necessary in order to generate inference
     * code for these graphs. Such graphs should be fixed, but as a
     * temporary work-around, setting this reorder_across_fake_quant flag
     * allows toco to perform necessary graph transformaitons on them,
     * at the cost of no longer faithfully matching inference and training
     * arithmetic.
     * </pre>
     *
     * <code>optional bool reorder_across_fake_quant = 8;</code>
     */
    public boolean hasReorderAcrossFakeQuant() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Normally, FakeQuant nodes must be strict boundaries for graph
     * transformations, in order to ensure that quantized inference has the
     * exact same arithmetic behavior as quantized training --- which is the
     * whole point of quantized training and of FakeQuant nodes in the first
     * place. However, that entails subtle requirements on where exactly
     * FakeQuant nodes must be placed in the graph. Some quantized graphs
     * have FakeQuant nodes at unexpected locations, that prevent graph
     * transformations that are necessary in order to generate inference
     * code for these graphs. Such graphs should be fixed, but as a
     * temporary work-around, setting this reorder_across_fake_quant flag
     * allows toco to perform necessary graph transformaitons on them,
     * at the cost of no longer faithfully matching inference and training
     * arithmetic.
     * </pre>
     *
     * <code>optional bool reorder_across_fake_quant = 8;</code>
     */
    public boolean getReorderAcrossFakeQuant() {
      return reorderAcrossFakeQuant_;
    }

    public static final int ALLOW_CUSTOM_OPS_FIELD_NUMBER = 10;
    private boolean allowCustomOps_;
    /**
     * <pre>
     * If true, allow TOCO to create TF Lite Custom operators for all the
     * unsupported Tensorflow ops.
     * </pre>
     *
     * <code>optional bool allow_custom_ops = 10;</code>
     */
    public boolean hasAllowCustomOps() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * If true, allow TOCO to create TF Lite Custom operators for all the
     * unsupported Tensorflow ops.
     * </pre>
     *
     * <code>optional bool allow_custom_ops = 10;</code>
     */
    public boolean getAllowCustomOps() {
      return allowCustomOps_;
    }

    public static final int DROP_CONTROL_DEPENDENCY_FIELD_NUMBER = 12;
    private boolean dropControlDependency_;
    /**
     * <pre>
     * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
     * If true, then control dependencies will be immediately dropped during
     * import.
     * If not set, the default behavior is as follows:
     *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
     *    - Default to true in all other cases.
     * </pre>
     *
     * <code>optional bool drop_control_dependency = 12;</code>
     */
    public boolean hasDropControlDependency() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
     * If true, then control dependencies will be immediately dropped during
     * import.
     * If not set, the default behavior is as follows:
     *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
     *    - Default to true in all other cases.
     * </pre>
     *
     * <code>optional bool drop_control_dependency = 12;</code>
     */
    public boolean getDropControlDependency() {
      return dropControlDependency_;
    }

    public static final int DEBUG_DISABLE_RECURRENT_CELL_FUSION_FIELD_NUMBER = 13;
    private boolean debugDisableRecurrentCellFusion_;
    /**
     * <pre>
     * Disables transformations that fuse subgraphs such as known LSTMs (not all
     * LSTMs are identified).
     * </pre>
     *
     * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
     */
    public boolean hasDebugDisableRecurrentCellFusion() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Disables transformations that fuse subgraphs such as known LSTMs (not all
     * LSTMs are identified).
     * </pre>
     *
     * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
     */
    public boolean getDebugDisableRecurrentCellFusion() {
      return debugDisableRecurrentCellFusion_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, inputFormat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, outputFormat_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, inferenceType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, defaultRangesMin_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, defaultRangesMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, dropFakeQuant_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, reorderAcrossFakeQuant_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, allowCustomOps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(11, inferenceInputType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(12, dropControlDependency_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(13, debugDisableRecurrentCellFusion_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, inputFormat_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, outputFormat_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, inferenceType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, defaultRangesMin_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, defaultRangesMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, dropFakeQuant_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, reorderAcrossFakeQuant_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, allowCustomOps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, inferenceInputType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, dropControlDependency_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, debugDisableRecurrentCellFusion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof toco.TocoFlagsOuterClass.TocoFlags)) {
        return super.equals(obj);
      }
      toco.TocoFlagsOuterClass.TocoFlags other = (toco.TocoFlagsOuterClass.TocoFlags) obj;

      boolean result = true;
      result = result && (hasInputFormat() == other.hasInputFormat());
      if (hasInputFormat()) {
        result = result && inputFormat_ == other.inputFormat_;
      }
      result = result && (hasOutputFormat() == other.hasOutputFormat());
      if (hasOutputFormat()) {
        result = result && outputFormat_ == other.outputFormat_;
      }
      result = result && (hasInferenceInputType() == other.hasInferenceInputType());
      if (hasInferenceInputType()) {
        result = result && inferenceInputType_ == other.inferenceInputType_;
      }
      result = result && (hasInferenceType() == other.hasInferenceType());
      if (hasInferenceType()) {
        result = result && inferenceType_ == other.inferenceType_;
      }
      result = result && (hasDefaultRangesMin() == other.hasDefaultRangesMin());
      if (hasDefaultRangesMin()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDefaultRangesMin())
            == java.lang.Float.floatToIntBits(
                other.getDefaultRangesMin()));
      }
      result = result && (hasDefaultRangesMax() == other.hasDefaultRangesMax());
      if (hasDefaultRangesMax()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDefaultRangesMax())
            == java.lang.Float.floatToIntBits(
                other.getDefaultRangesMax()));
      }
      result = result && (hasDropFakeQuant() == other.hasDropFakeQuant());
      if (hasDropFakeQuant()) {
        result = result && (getDropFakeQuant()
            == other.getDropFakeQuant());
      }
      result = result && (hasReorderAcrossFakeQuant() == other.hasReorderAcrossFakeQuant());
      if (hasReorderAcrossFakeQuant()) {
        result = result && (getReorderAcrossFakeQuant()
            == other.getReorderAcrossFakeQuant());
      }
      result = result && (hasAllowCustomOps() == other.hasAllowCustomOps());
      if (hasAllowCustomOps()) {
        result = result && (getAllowCustomOps()
            == other.getAllowCustomOps());
      }
      result = result && (hasDropControlDependency() == other.hasDropControlDependency());
      if (hasDropControlDependency()) {
        result = result && (getDropControlDependency()
            == other.getDropControlDependency());
      }
      result = result && (hasDebugDisableRecurrentCellFusion() == other.hasDebugDisableRecurrentCellFusion());
      if (hasDebugDisableRecurrentCellFusion()) {
        result = result && (getDebugDisableRecurrentCellFusion()
            == other.getDebugDisableRecurrentCellFusion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInputFormat()) {
        hash = (37 * hash) + INPUT_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + inputFormat_;
      }
      if (hasOutputFormat()) {
        hash = (37 * hash) + OUTPUT_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + outputFormat_;
      }
      if (hasInferenceInputType()) {
        hash = (37 * hash) + INFERENCE_INPUT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + inferenceInputType_;
      }
      if (hasInferenceType()) {
        hash = (37 * hash) + INFERENCE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + inferenceType_;
      }
      if (hasDefaultRangesMin()) {
        hash = (37 * hash) + DEFAULT_RANGES_MIN_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDefaultRangesMin());
      }
      if (hasDefaultRangesMax()) {
        hash = (37 * hash) + DEFAULT_RANGES_MAX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDefaultRangesMax());
      }
      if (hasDropFakeQuant()) {
        hash = (37 * hash) + DROP_FAKE_QUANT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDropFakeQuant());
      }
      if (hasReorderAcrossFakeQuant()) {
        hash = (37 * hash) + REORDER_ACROSS_FAKE_QUANT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getReorderAcrossFakeQuant());
      }
      if (hasAllowCustomOps()) {
        hash = (37 * hash) + ALLOW_CUSTOM_OPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowCustomOps());
      }
      if (hasDropControlDependency()) {
        hash = (37 * hash) + DROP_CONTROL_DEPENDENCY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDropControlDependency());
      }
      if (hasDebugDisableRecurrentCellFusion()) {
        hash = (37 * hash) + DEBUG_DISABLE_RECURRENT_CELL_FUSION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDebugDisableRecurrentCellFusion());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static toco.TocoFlagsOuterClass.TocoFlags parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(toco.TocoFlagsOuterClass.TocoFlags prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TocoFlags encodes extra parameters that drive tooling operations, that
     * are not normally encoded in model files and in general may not be thought
     * of as properties of models, instead describing how models are to be
     * processed in the context of the present tooling job.
     * Next ID to use: 14.
     * </pre>
     *
     * Protobuf type {@code toco.TocoFlags}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:toco.TocoFlags)
        toco.TocoFlagsOuterClass.TocoFlagsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return toco.TocoFlagsOuterClass.internal_static_toco_TocoFlags_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return toco.TocoFlagsOuterClass.internal_static_toco_TocoFlags_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                toco.TocoFlagsOuterClass.TocoFlags.class, toco.TocoFlagsOuterClass.TocoFlags.Builder.class);
      }

      // Construct using toco.TocoFlagsOuterClass.TocoFlags.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        inputFormat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        outputFormat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        inferenceInputType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        inferenceType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        defaultRangesMin_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        defaultRangesMax_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        dropFakeQuant_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        reorderAcrossFakeQuant_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        allowCustomOps_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        dropControlDependency_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        debugDisableRecurrentCellFusion_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return toco.TocoFlagsOuterClass.internal_static_toco_TocoFlags_descriptor;
      }

      public toco.TocoFlagsOuterClass.TocoFlags getDefaultInstanceForType() {
        return toco.TocoFlagsOuterClass.TocoFlags.getDefaultInstance();
      }

      public toco.TocoFlagsOuterClass.TocoFlags build() {
        toco.TocoFlagsOuterClass.TocoFlags result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public toco.TocoFlagsOuterClass.TocoFlags buildPartial() {
        toco.TocoFlagsOuterClass.TocoFlags result = new toco.TocoFlagsOuterClass.TocoFlags(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.inputFormat_ = inputFormat_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.outputFormat_ = outputFormat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.inferenceInputType_ = inferenceInputType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.inferenceType_ = inferenceType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.defaultRangesMin_ = defaultRangesMin_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.defaultRangesMax_ = defaultRangesMax_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dropFakeQuant_ = dropFakeQuant_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.reorderAcrossFakeQuant_ = reorderAcrossFakeQuant_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.allowCustomOps_ = allowCustomOps_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.dropControlDependency_ = dropControlDependency_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.debugDisableRecurrentCellFusion_ = debugDisableRecurrentCellFusion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof toco.TocoFlagsOuterClass.TocoFlags) {
          return mergeFrom((toco.TocoFlagsOuterClass.TocoFlags)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(toco.TocoFlagsOuterClass.TocoFlags other) {
        if (other == toco.TocoFlagsOuterClass.TocoFlags.getDefaultInstance()) return this;
        if (other.hasInputFormat()) {
          setInputFormat(other.getInputFormat());
        }
        if (other.hasOutputFormat()) {
          setOutputFormat(other.getOutputFormat());
        }
        if (other.hasInferenceInputType()) {
          setInferenceInputType(other.getInferenceInputType());
        }
        if (other.hasInferenceType()) {
          setInferenceType(other.getInferenceType());
        }
        if (other.hasDefaultRangesMin()) {
          setDefaultRangesMin(other.getDefaultRangesMin());
        }
        if (other.hasDefaultRangesMax()) {
          setDefaultRangesMax(other.getDefaultRangesMax());
        }
        if (other.hasDropFakeQuant()) {
          setDropFakeQuant(other.getDropFakeQuant());
        }
        if (other.hasReorderAcrossFakeQuant()) {
          setReorderAcrossFakeQuant(other.getReorderAcrossFakeQuant());
        }
        if (other.hasAllowCustomOps()) {
          setAllowCustomOps(other.getAllowCustomOps());
        }
        if (other.hasDropControlDependency()) {
          setDropControlDependency(other.getDropControlDependency());
        }
        if (other.hasDebugDisableRecurrentCellFusion()) {
          setDebugDisableRecurrentCellFusion(other.getDebugDisableRecurrentCellFusion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        toco.TocoFlagsOuterClass.TocoFlags parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (toco.TocoFlagsOuterClass.TocoFlags) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int inputFormat_ = 0;
      /**
       * <pre>
       * Input file format
       * </pre>
       *
       * <code>optional .toco.FileFormat input_format = 1;</code>
       */
      public boolean hasInputFormat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Input file format
       * </pre>
       *
       * <code>optional .toco.FileFormat input_format = 1;</code>
       */
      public toco.TocoFlagsOuterClass.FileFormat getInputFormat() {
        toco.TocoFlagsOuterClass.FileFormat result = toco.TocoFlagsOuterClass.FileFormat.valueOf(inputFormat_);
        return result == null ? toco.TocoFlagsOuterClass.FileFormat.FILE_FORMAT_UNKNOWN : result;
      }
      /**
       * <pre>
       * Input file format
       * </pre>
       *
       * <code>optional .toco.FileFormat input_format = 1;</code>
       */
      public Builder setInputFormat(toco.TocoFlagsOuterClass.FileFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        inputFormat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Input file format
       * </pre>
       *
       * <code>optional .toco.FileFormat input_format = 1;</code>
       */
      public Builder clearInputFormat() {
        bitField0_ = (bitField0_ & ~0x00000001);
        inputFormat_ = 0;
        onChanged();
        return this;
      }

      private int outputFormat_ = 0;
      /**
       * <pre>
       * Output file format
       * </pre>
       *
       * <code>optional .toco.FileFormat output_format = 2;</code>
       */
      public boolean hasOutputFormat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Output file format
       * </pre>
       *
       * <code>optional .toco.FileFormat output_format = 2;</code>
       */
      public toco.TocoFlagsOuterClass.FileFormat getOutputFormat() {
        toco.TocoFlagsOuterClass.FileFormat result = toco.TocoFlagsOuterClass.FileFormat.valueOf(outputFormat_);
        return result == null ? toco.TocoFlagsOuterClass.FileFormat.FILE_FORMAT_UNKNOWN : result;
      }
      /**
       * <pre>
       * Output file format
       * </pre>
       *
       * <code>optional .toco.FileFormat output_format = 2;</code>
       */
      public Builder setOutputFormat(toco.TocoFlagsOuterClass.FileFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        outputFormat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Output file format
       * </pre>
       *
       * <code>optional .toco.FileFormat output_format = 2;</code>
       */
      public Builder clearOutputFormat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        outputFormat_ = 0;
        onChanged();
        return this;
      }

      private int inferenceInputType_ = 0;
      /**
       * <pre>
       * Similar to inference_type, but allows to control specifically the
       * quantization of input arrays, separately from other arrays.
       * If not set, then the value of inference_type is implicitly used, i.e.
       * by default input arrays are quantized like other arrays.
       * Like inference_type, this only affects real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * The typical use for this flag is for vision models taking a bitmap
       * as input, typically with uint8 channels, yet still requiring floating-point
       * inference. For such image models, the uint8 input is quantized, i.e.
       * the uint8 values are interpreted as real numbers, and the quantization
       * parameters used for such input arrays are their mean_value, std_value
       * parameters.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_input_type = 11;</code>
       */
      public boolean hasInferenceInputType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Similar to inference_type, but allows to control specifically the
       * quantization of input arrays, separately from other arrays.
       * If not set, then the value of inference_type is implicitly used, i.e.
       * by default input arrays are quantized like other arrays.
       * Like inference_type, this only affects real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * The typical use for this flag is for vision models taking a bitmap
       * as input, typically with uint8 channels, yet still requiring floating-point
       * inference. For such image models, the uint8 input is quantized, i.e.
       * the uint8 values are interpreted as real numbers, and the quantization
       * parameters used for such input arrays are their mean_value, std_value
       * parameters.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_input_type = 11;</code>
       */
      public toco.Types.IODataType getInferenceInputType() {
        toco.Types.IODataType result = toco.Types.IODataType.valueOf(inferenceInputType_);
        return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Similar to inference_type, but allows to control specifically the
       * quantization of input arrays, separately from other arrays.
       * If not set, then the value of inference_type is implicitly used, i.e.
       * by default input arrays are quantized like other arrays.
       * Like inference_type, this only affects real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * The typical use for this flag is for vision models taking a bitmap
       * as input, typically with uint8 channels, yet still requiring floating-point
       * inference. For such image models, the uint8 input is quantized, i.e.
       * the uint8 values are interpreted as real numbers, and the quantization
       * parameters used for such input arrays are their mean_value, std_value
       * parameters.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_input_type = 11;</code>
       */
      public Builder setInferenceInputType(toco.Types.IODataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        inferenceInputType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Similar to inference_type, but allows to control specifically the
       * quantization of input arrays, separately from other arrays.
       * If not set, then the value of inference_type is implicitly used, i.e.
       * by default input arrays are quantized like other arrays.
       * Like inference_type, this only affects real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * The typical use for this flag is for vision models taking a bitmap
       * as input, typically with uint8 channels, yet still requiring floating-point
       * inference. For such image models, the uint8 input is quantized, i.e.
       * the uint8 values are interpreted as real numbers, and the quantization
       * parameters used for such input arrays are their mean_value, std_value
       * parameters.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_input_type = 11;</code>
       */
      public Builder clearInferenceInputType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inferenceInputType_ = 0;
        onChanged();
        return this;
      }

      private int inferenceType_ = 0;
      /**
       * <pre>
       * Sets the type of real-number arrays in the output file, that is, controls
       * the representation (quantization) of real numbers in the output file,
       * except for input arrays, which are controlled by inference_input_type.
       * NOTE: this flag only impacts real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * For real-number arrays, the impact of this flag is to allow the output
       * file to choose a different real-numbers representation (quantization)
       * from what the input file used. For any other types of arrays, changing
       * the data type would not make sense.
       * Specifically:
       *    - If FLOAT, then real-numbers arrays will be of type float in
       *      the output file. If they were quantized in the input file, then
       *      they get dequantized.
       *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
       *      as uint8 in the output file. If they were float in the input file,
       *      then they get quantized.
       *    - If not set, then all real-numbers arrays retain the same type in the
       *      output file as they have in the input file.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_type = 4;</code>
       */
      public boolean hasInferenceType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Sets the type of real-number arrays in the output file, that is, controls
       * the representation (quantization) of real numbers in the output file,
       * except for input arrays, which are controlled by inference_input_type.
       * NOTE: this flag only impacts real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * For real-number arrays, the impact of this flag is to allow the output
       * file to choose a different real-numbers representation (quantization)
       * from what the input file used. For any other types of arrays, changing
       * the data type would not make sense.
       * Specifically:
       *    - If FLOAT, then real-numbers arrays will be of type float in
       *      the output file. If they were quantized in the input file, then
       *      they get dequantized.
       *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
       *      as uint8 in the output file. If they were float in the input file,
       *      then they get quantized.
       *    - If not set, then all real-numbers arrays retain the same type in the
       *      output file as they have in the input file.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_type = 4;</code>
       */
      public toco.Types.IODataType getInferenceType() {
        toco.Types.IODataType result = toco.Types.IODataType.valueOf(inferenceType_);
        return result == null ? toco.Types.IODataType.IO_DATA_TYPE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Sets the type of real-number arrays in the output file, that is, controls
       * the representation (quantization) of real numbers in the output file,
       * except for input arrays, which are controlled by inference_input_type.
       * NOTE: this flag only impacts real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * For real-number arrays, the impact of this flag is to allow the output
       * file to choose a different real-numbers representation (quantization)
       * from what the input file used. For any other types of arrays, changing
       * the data type would not make sense.
       * Specifically:
       *    - If FLOAT, then real-numbers arrays will be of type float in
       *      the output file. If they were quantized in the input file, then
       *      they get dequantized.
       *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
       *      as uint8 in the output file. If they were float in the input file,
       *      then they get quantized.
       *    - If not set, then all real-numbers arrays retain the same type in the
       *      output file as they have in the input file.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_type = 4;</code>
       */
      public Builder setInferenceType(toco.Types.IODataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        inferenceType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Sets the type of real-number arrays in the output file, that is, controls
       * the representation (quantization) of real numbers in the output file,
       * except for input arrays, which are controlled by inference_input_type.
       * NOTE: this flag only impacts real-number arrays. By "real-number"
       * we mean float arrays, and quantized arrays. This excludes plain
       * integer arrays, strings arrays, and every other data type.
       * For real-number arrays, the impact of this flag is to allow the output
       * file to choose a different real-numbers representation (quantization)
       * from what the input file used. For any other types of arrays, changing
       * the data type would not make sense.
       * Specifically:
       *    - If FLOAT, then real-numbers arrays will be of type float in
       *      the output file. If they were quantized in the input file, then
       *      they get dequantized.
       *    - If QUANTIZED_UINT8, then real-numbers arrays will be quantized
       *      as uint8 in the output file. If they were float in the input file,
       *      then they get quantized.
       *    - If not set, then all real-numbers arrays retain the same type in the
       *      output file as they have in the input file.
       * </pre>
       *
       * <code>optional .toco.IODataType inference_type = 4;</code>
       */
      public Builder clearInferenceType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        inferenceType_ = 0;
        onChanged();
        return this;
      }

      private float defaultRangesMin_ ;
      /**
       * <pre>
       * default_ranges_min and default_ranges_max are helpers to experiment
       * with quantization of models. Normally, quantization requires the input
       * model to have (min, max) range information for every activations array.
       * This is needed in order to know how to quantize arrays and still achieve
       * satisfactory accuracy. However, in some circumstances one would just like
       * to estimate the performance of quantized inference, without caring about
       * accuracy. That is what default_ranges_min and default_ranges_max are for:
       * when specified, they will be used as default (min, max) range boundaries
       * for all activation arrays that lack (min, max) range information, thus
       * allowing for quantization to proceed.
       * It should be clear from the above explanation that these parameters are
       * for experimentation purposes only and should not be used in production:
       * they make it easy to quantize models, but the resulting quantized model
       * will be inaccurate.
       * </pre>
       *
       * <code>optional float default_ranges_min = 5;</code>
       */
      public boolean hasDefaultRangesMin() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * default_ranges_min and default_ranges_max are helpers to experiment
       * with quantization of models. Normally, quantization requires the input
       * model to have (min, max) range information for every activations array.
       * This is needed in order to know how to quantize arrays and still achieve
       * satisfactory accuracy. However, in some circumstances one would just like
       * to estimate the performance of quantized inference, without caring about
       * accuracy. That is what default_ranges_min and default_ranges_max are for:
       * when specified, they will be used as default (min, max) range boundaries
       * for all activation arrays that lack (min, max) range information, thus
       * allowing for quantization to proceed.
       * It should be clear from the above explanation that these parameters are
       * for experimentation purposes only and should not be used in production:
       * they make it easy to quantize models, but the resulting quantized model
       * will be inaccurate.
       * </pre>
       *
       * <code>optional float default_ranges_min = 5;</code>
       */
      public float getDefaultRangesMin() {
        return defaultRangesMin_;
      }
      /**
       * <pre>
       * default_ranges_min and default_ranges_max are helpers to experiment
       * with quantization of models. Normally, quantization requires the input
       * model to have (min, max) range information for every activations array.
       * This is needed in order to know how to quantize arrays and still achieve
       * satisfactory accuracy. However, in some circumstances one would just like
       * to estimate the performance of quantized inference, without caring about
       * accuracy. That is what default_ranges_min and default_ranges_max are for:
       * when specified, they will be used as default (min, max) range boundaries
       * for all activation arrays that lack (min, max) range information, thus
       * allowing for quantization to proceed.
       * It should be clear from the above explanation that these parameters are
       * for experimentation purposes only and should not be used in production:
       * they make it easy to quantize models, but the resulting quantized model
       * will be inaccurate.
       * </pre>
       *
       * <code>optional float default_ranges_min = 5;</code>
       */
      public Builder setDefaultRangesMin(float value) {
        bitField0_ |= 0x00000010;
        defaultRangesMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * default_ranges_min and default_ranges_max are helpers to experiment
       * with quantization of models. Normally, quantization requires the input
       * model to have (min, max) range information for every activations array.
       * This is needed in order to know how to quantize arrays and still achieve
       * satisfactory accuracy. However, in some circumstances one would just like
       * to estimate the performance of quantized inference, without caring about
       * accuracy. That is what default_ranges_min and default_ranges_max are for:
       * when specified, they will be used as default (min, max) range boundaries
       * for all activation arrays that lack (min, max) range information, thus
       * allowing for quantization to proceed.
       * It should be clear from the above explanation that these parameters are
       * for experimentation purposes only and should not be used in production:
       * they make it easy to quantize models, but the resulting quantized model
       * will be inaccurate.
       * </pre>
       *
       * <code>optional float default_ranges_min = 5;</code>
       */
      public Builder clearDefaultRangesMin() {
        bitField0_ = (bitField0_ & ~0x00000010);
        defaultRangesMin_ = 0F;
        onChanged();
        return this;
      }

      private float defaultRangesMax_ ;
      /**
       * <code>optional float default_ranges_max = 6;</code>
       */
      public boolean hasDefaultRangesMax() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float default_ranges_max = 6;</code>
       */
      public float getDefaultRangesMax() {
        return defaultRangesMax_;
      }
      /**
       * <code>optional float default_ranges_max = 6;</code>
       */
      public Builder setDefaultRangesMax(float value) {
        bitField0_ |= 0x00000020;
        defaultRangesMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float default_ranges_max = 6;</code>
       */
      public Builder clearDefaultRangesMax() {
        bitField0_ = (bitField0_ & ~0x00000020);
        defaultRangesMax_ = 0F;
        onChanged();
        return this;
      }

      private boolean dropFakeQuant_ ;
      /**
       * <pre>
       * Ignore and discard FakeQuant nodes. For instance, that can be used to
       * generate plain float code without fake-quantization from a quantized
       * graph.
       * </pre>
       *
       * <code>optional bool drop_fake_quant = 7;</code>
       */
      public boolean hasDropFakeQuant() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Ignore and discard FakeQuant nodes. For instance, that can be used to
       * generate plain float code without fake-quantization from a quantized
       * graph.
       * </pre>
       *
       * <code>optional bool drop_fake_quant = 7;</code>
       */
      public boolean getDropFakeQuant() {
        return dropFakeQuant_;
      }
      /**
       * <pre>
       * Ignore and discard FakeQuant nodes. For instance, that can be used to
       * generate plain float code without fake-quantization from a quantized
       * graph.
       * </pre>
       *
       * <code>optional bool drop_fake_quant = 7;</code>
       */
      public Builder setDropFakeQuant(boolean value) {
        bitField0_ |= 0x00000040;
        dropFakeQuant_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Ignore and discard FakeQuant nodes. For instance, that can be used to
       * generate plain float code without fake-quantization from a quantized
       * graph.
       * </pre>
       *
       * <code>optional bool drop_fake_quant = 7;</code>
       */
      public Builder clearDropFakeQuant() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dropFakeQuant_ = false;
        onChanged();
        return this;
      }

      private boolean reorderAcrossFakeQuant_ ;
      /**
       * <pre>
       * Normally, FakeQuant nodes must be strict boundaries for graph
       * transformations, in order to ensure that quantized inference has the
       * exact same arithmetic behavior as quantized training --- which is the
       * whole point of quantized training and of FakeQuant nodes in the first
       * place. However, that entails subtle requirements on where exactly
       * FakeQuant nodes must be placed in the graph. Some quantized graphs
       * have FakeQuant nodes at unexpected locations, that prevent graph
       * transformations that are necessary in order to generate inference
       * code for these graphs. Such graphs should be fixed, but as a
       * temporary work-around, setting this reorder_across_fake_quant flag
       * allows toco to perform necessary graph transformaitons on them,
       * at the cost of no longer faithfully matching inference and training
       * arithmetic.
       * </pre>
       *
       * <code>optional bool reorder_across_fake_quant = 8;</code>
       */
      public boolean hasReorderAcrossFakeQuant() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Normally, FakeQuant nodes must be strict boundaries for graph
       * transformations, in order to ensure that quantized inference has the
       * exact same arithmetic behavior as quantized training --- which is the
       * whole point of quantized training and of FakeQuant nodes in the first
       * place. However, that entails subtle requirements on where exactly
       * FakeQuant nodes must be placed in the graph. Some quantized graphs
       * have FakeQuant nodes at unexpected locations, that prevent graph
       * transformations that are necessary in order to generate inference
       * code for these graphs. Such graphs should be fixed, but as a
       * temporary work-around, setting this reorder_across_fake_quant flag
       * allows toco to perform necessary graph transformaitons on them,
       * at the cost of no longer faithfully matching inference and training
       * arithmetic.
       * </pre>
       *
       * <code>optional bool reorder_across_fake_quant = 8;</code>
       */
      public boolean getReorderAcrossFakeQuant() {
        return reorderAcrossFakeQuant_;
      }
      /**
       * <pre>
       * Normally, FakeQuant nodes must be strict boundaries for graph
       * transformations, in order to ensure that quantized inference has the
       * exact same arithmetic behavior as quantized training --- which is the
       * whole point of quantized training and of FakeQuant nodes in the first
       * place. However, that entails subtle requirements on where exactly
       * FakeQuant nodes must be placed in the graph. Some quantized graphs
       * have FakeQuant nodes at unexpected locations, that prevent graph
       * transformations that are necessary in order to generate inference
       * code for these graphs. Such graphs should be fixed, but as a
       * temporary work-around, setting this reorder_across_fake_quant flag
       * allows toco to perform necessary graph transformaitons on them,
       * at the cost of no longer faithfully matching inference and training
       * arithmetic.
       * </pre>
       *
       * <code>optional bool reorder_across_fake_quant = 8;</code>
       */
      public Builder setReorderAcrossFakeQuant(boolean value) {
        bitField0_ |= 0x00000080;
        reorderAcrossFakeQuant_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Normally, FakeQuant nodes must be strict boundaries for graph
       * transformations, in order to ensure that quantized inference has the
       * exact same arithmetic behavior as quantized training --- which is the
       * whole point of quantized training and of FakeQuant nodes in the first
       * place. However, that entails subtle requirements on where exactly
       * FakeQuant nodes must be placed in the graph. Some quantized graphs
       * have FakeQuant nodes at unexpected locations, that prevent graph
       * transformations that are necessary in order to generate inference
       * code for these graphs. Such graphs should be fixed, but as a
       * temporary work-around, setting this reorder_across_fake_quant flag
       * allows toco to perform necessary graph transformaitons on them,
       * at the cost of no longer faithfully matching inference and training
       * arithmetic.
       * </pre>
       *
       * <code>optional bool reorder_across_fake_quant = 8;</code>
       */
      public Builder clearReorderAcrossFakeQuant() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reorderAcrossFakeQuant_ = false;
        onChanged();
        return this;
      }

      private boolean allowCustomOps_ ;
      /**
       * <pre>
       * If true, allow TOCO to create TF Lite Custom operators for all the
       * unsupported Tensorflow ops.
       * </pre>
       *
       * <code>optional bool allow_custom_ops = 10;</code>
       */
      public boolean hasAllowCustomOps() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * If true, allow TOCO to create TF Lite Custom operators for all the
       * unsupported Tensorflow ops.
       * </pre>
       *
       * <code>optional bool allow_custom_ops = 10;</code>
       */
      public boolean getAllowCustomOps() {
        return allowCustomOps_;
      }
      /**
       * <pre>
       * If true, allow TOCO to create TF Lite Custom operators for all the
       * unsupported Tensorflow ops.
       * </pre>
       *
       * <code>optional bool allow_custom_ops = 10;</code>
       */
      public Builder setAllowCustomOps(boolean value) {
        bitField0_ |= 0x00000100;
        allowCustomOps_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, allow TOCO to create TF Lite Custom operators for all the
       * unsupported Tensorflow ops.
       * </pre>
       *
       * <code>optional bool allow_custom_ops = 10;</code>
       */
      public Builder clearAllowCustomOps() {
        bitField0_ = (bitField0_ & ~0x00000100);
        allowCustomOps_ = false;
        onChanged();
        return this;
      }

      private boolean dropControlDependency_ ;
      /**
       * <pre>
       * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
       * If true, then control dependencies will be immediately dropped during
       * import.
       * If not set, the default behavior is as follows:
       *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
       *    - Default to true in all other cases.
       * </pre>
       *
       * <code>optional bool drop_control_dependency = 12;</code>
       */
      public boolean hasDropControlDependency() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
       * If true, then control dependencies will be immediately dropped during
       * import.
       * If not set, the default behavior is as follows:
       *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
       *    - Default to true in all other cases.
       * </pre>
       *
       * <code>optional bool drop_control_dependency = 12;</code>
       */
      public boolean getDropControlDependency() {
        return dropControlDependency_;
      }
      /**
       * <pre>
       * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
       * If true, then control dependencies will be immediately dropped during
       * import.
       * If not set, the default behavior is as follows:
       *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
       *    - Default to true in all other cases.
       * </pre>
       *
       * <code>optional bool drop_control_dependency = 12;</code>
       */
      public Builder setDropControlDependency(boolean value) {
        bitField0_ |= 0x00000200;
        dropControlDependency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Applies only to the case when the input format is TENSORFLOW_GRAPHDEF.
       * If true, then control dependencies will be immediately dropped during
       * import.
       * If not set, the default behavior is as follows:
       *    - Default to false if the output format is TENSORFLOW_GRAPHDEF.
       *    - Default to true in all other cases.
       * </pre>
       *
       * <code>optional bool drop_control_dependency = 12;</code>
       */
      public Builder clearDropControlDependency() {
        bitField0_ = (bitField0_ & ~0x00000200);
        dropControlDependency_ = false;
        onChanged();
        return this;
      }

      private boolean debugDisableRecurrentCellFusion_ ;
      /**
       * <pre>
       * Disables transformations that fuse subgraphs such as known LSTMs (not all
       * LSTMs are identified).
       * </pre>
       *
       * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
       */
      public boolean hasDebugDisableRecurrentCellFusion() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Disables transformations that fuse subgraphs such as known LSTMs (not all
       * LSTMs are identified).
       * </pre>
       *
       * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
       */
      public boolean getDebugDisableRecurrentCellFusion() {
        return debugDisableRecurrentCellFusion_;
      }
      /**
       * <pre>
       * Disables transformations that fuse subgraphs such as known LSTMs (not all
       * LSTMs are identified).
       * </pre>
       *
       * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
       */
      public Builder setDebugDisableRecurrentCellFusion(boolean value) {
        bitField0_ |= 0x00000400;
        debugDisableRecurrentCellFusion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Disables transformations that fuse subgraphs such as known LSTMs (not all
       * LSTMs are identified).
       * </pre>
       *
       * <code>optional bool debug_disable_recurrent_cell_fusion = 13;</code>
       */
      public Builder clearDebugDisableRecurrentCellFusion() {
        bitField0_ = (bitField0_ & ~0x00000400);
        debugDisableRecurrentCellFusion_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:toco.TocoFlags)
    }

    // @@protoc_insertion_point(class_scope:toco.TocoFlags)
    private static final toco.TocoFlagsOuterClass.TocoFlags DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new toco.TocoFlagsOuterClass.TocoFlags();
    }

    public static toco.TocoFlagsOuterClass.TocoFlags getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TocoFlags>
        PARSER = new com.google.protobuf.AbstractParser<TocoFlags>() {
      public TocoFlags parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TocoFlags(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TocoFlags> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TocoFlags> getParserForType() {
      return PARSER;
    }

    public toco.TocoFlagsOuterClass.TocoFlags getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_toco_TocoFlags_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_toco_TocoFlags_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-tensorflow/contrib/lite/toco/toco_flag" +
      "s.proto\022\004toco\032(tensorflow/contrib/lite/t" +
      "oco/types.proto\"\222\003\n\tTocoFlags\022&\n\014input_f" +
      "ormat\030\001 \001(\0162\020.toco.FileFormat\022\'\n\routput_" +
      "format\030\002 \001(\0162\020.toco.FileFormat\022.\n\024infere" +
      "nce_input_type\030\013 \001(\0162\020.toco.IODataType\022(" +
      "\n\016inference_type\030\004 \001(\0162\020.toco.IODataType" +
      "\022\032\n\022default_ranges_min\030\005 \001(\002\022\032\n\022default_" +
      "ranges_max\030\006 \001(\002\022\027\n\017drop_fake_quant\030\007 \001(" +
      "\010\022!\n\031reorder_across_fake_quant\030\010 \001(\010\022\030\n\020",
      "allow_custom_ops\030\n \001(\010\022\037\n\027drop_control_d" +
      "ependency\030\014 \001(\010\022+\n#debug_disable_recurre" +
      "nt_cell_fusion\030\r \001(\010*\\\n\nFileFormat\022\027\n\023FI" +
      "LE_FORMAT_UNKNOWN\020\000\022\027\n\023TENSORFLOW_GRAPHD" +
      "EF\020\001\022\n\n\006TFLITE\020\002\022\020\n\014GRAPHVIZ_DOT\020\003"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          toco.Types.getDescriptor(),
        }, assigner);
    internal_static_toco_TocoFlags_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_toco_TocoFlags_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_toco_TocoFlags_descriptor,
        new java.lang.String[] { "InputFormat", "OutputFormat", "InferenceInputType", "InferenceType", "DefaultRangesMin", "DefaultRangesMax", "DropFakeQuant", "ReorderAcrossFakeQuant", "AllowCustomOps", "DropControlDependency", "DebugDisableRecurrentCellFusion", });
    toco.Types.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
